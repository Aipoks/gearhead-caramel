from pbge.plots import Plot, PlotState
from pbge.dialogue import Offer, ContextTag
from game import teams, services, ghdialogue
from game.ghdialogue import context
import gears
from gears import factions, personality
import game.content.gharchitecture
import pbge
import game.content.plotutility
from game.content import ghwaypoints, gharchitecture, plotutility
import game.content.ghterrain
from game.content.ghplots.dd_combatmission import CombatMissionSeed
import random
from .dd_main import DZDRoadMapExit
from . import missionbuilder


class OneShotInfoBlast(object):
    def __init__(self, subject, message):
        self.subject = subject
        self.message = message
        self.active = True

    def build_offer(self):
        return Offer(msg=self.message, context=ContextTag((context.INFO,)), effect=self.blast_that_info,
                     subject=self.subject, data={"subject": self.subject}, no_repeats=True)

    def blast_that_info(self, *args):
        self.active = False


class DZD_Wujung(Plot):
    LABEL = "DZD_HOME_BASE"
    active = True
    scope = True

    # noinspection PyAttributeOutsideInit,PyAttributeOutsideInit,PyAttributeOutsideInit
    # I have no idea what the above comment means. Presumably automatically generated by PyCharm for some reason?
    def custom_init(self, nart):
        team1 = teams.Team(name="Player Team")
        team2 = teams.Team(name="Civilian Team", allies=(team1,))
        myscene = gears.GearHeadScene(50, 50, "Wujung City", player_team=team1, civilian_team=team2,
                                      scale=gears.scale.HumanScale, is_metro=True,
                                      faction=gears.factions.TerranFederation,
                                      attributes=(
                                      gears.personality.GreenZone, gears.tags.City, gears.tags.SCENE_PUBLIC))
        myscene.exploration_music = 'Doctor_Turtle_-_04_-_Lets_Just_Get_Through_Christmas.ogg'

        npc = gears.selector.random_character(50, local_tags=myscene.attributes)
        npc.place(myscene, team=team2)

        myscenegen = pbge.randmaps.CityGridGenerator(myscene, game.content.gharchitecture.HumanScaleGreenzone(),
                                                     road_terrain=game.content.ghterrain.Flagstone)

        self.register_scene(nart, myscene, myscenegen, ident="LOCALE")
        self.register_element("METRO", myscene.metrodat)
        self.register_element("METROSCENE", myscene)

        myroom2 = self.register_element("_ROOM2", pbge.randmaps.rooms.Room(3, 3, anchor=pbge.randmaps.anchors.west),
                                        dident="LOCALE")
        westgate = self.register_element("ENTRANCE", DZDRoadMapExit(roadmap=self.elements["DZ_ROADMAP"],
                                                                    node=self.elements["DZ_NODE"],
                                                                    name="The West Gate",
                                                                    desc="You stand at the western city gate of Wujung. Beyond this point lies the dead zone.",
                                                                    anchor=pbge.randmaps.anchors.west,
                                                                    plot_locked=True), dident="_ROOM2")
        # Gonna register the entrance under another name for the subplots.
        self.register_element("MISSION_GATE", westgate)

        # Setting Wujung to the home base.
        nart.camp.home_base = (myscene, westgate)

        # Add the services.
        tplot = self.add_sub_plot(nart, "DZDHB_AlliedArmor")
        tplot = self.add_sub_plot(nart, "DZDHB_EliteEquipment")
        tplot = self.add_sub_plot(nart, "DZDHB_BlueFortress")
        tplot = self.add_sub_plot(nart, "DZDHB_BronzeHorseInn")
        tplot = self.add_sub_plot(nart, "DZDHB_WujungHospital")
        tplot = self.add_sub_plot(nart, "DZDHB_LongRoadLogistics")
        # Black Isle Pub
        # Hwang-Sa Mission
        # Reconstruction Site

        # Add some local lancemates.
        tplot = self.add_sub_plot(nart, "RANDOM_LANCEMATE")
        tplot = self.add_sub_plot(nart, "RANDOM_LANCEMATE")

        # Add the local tarot.
        self.register_element(game.content.mechtarot.ME_TAROTSCOPE,myscene.metrodat)
        threat_card = nart.add_tarot_card(self, (game.content.ghplots.dd_tarot.MT_THREAT,), spstate = pbge.plots.PlotState(rank=15).based_on(self))
        game.content.mechtarot.Constellation(nart, self, threat_card, threat_card.get_negations()[0], steps=3)

        # Local info counters.
        self.local_info = (
            OneShotInfoBlast("Wujung",
                             "Wujung is an old fortress-city; it's the home base of the Terran Defense Force and known as the gateway to the Dead Zone. Unfortunately, it's also the first city Typhon attacked."),
            OneShotInfoBlast("Typhon",
                             "Typhon was a biomonster created during the Age of Superpowers. It awoke and attacked Wujung last year... [TyphonDesc]"),
            OneShotInfoBlast("Aegis",
                             "They're the military government that controls [Luna] right now. [chat_lead_in] Aegis operatives are the ones who activated Typhon and led it to Wujung."),
        )

        return True

    def METROSCENE_ENTER(self, camp):
        # Upon entering this scene, deal with any dead or incapacitated party members.
        # Also, deal with party members who have lost their mecha. This may include the PC.
        plotutility.EnterTownLanceRecovery(camp, self.elements["METROSCENE"], self.elements["METRO"])


    def _get_generic_offers(self, npc, camp):
        """Get any offers that could apply to non-element NPCs."""
        goffs = list()
        if camp.scene.get_root_scene() is self.elements["LOCALE"]:
            # This is an NPC in Wujung. Give them sone Info's to disclose.
            for inf in self.local_info:
                if inf.active:
                    goffs.append(inf.build_offer())
        return goffs

    def get_dialogue_grammar(self, npc, camp):
        mygram = dict()
        if camp.scene.get_root_scene() is self.elements["LOCALE"]:
            # This is an NPC in Wujung. Give them some news.
            mygram["[News]"] = ["Wujung is still repairing the damage Typhon caused", ]
            if camp.pc.has_badge("Typhon Slayer"):
                mygram["[TyphonDesc]"] = ["Why am I telling you this? You should know more about Typhon than I do!", ]
            else:
                mygram["[TyphonDesc]"] = [
                    "It caused a lot of damage and killed a lot of people, but finally got taken down by a team of cavaliers.", ]
        return mygram


class DZD_BronzeHorseInn(Plot):
    LABEL = "DZDHB_BronzeHorseInn"

    active = True
    scope = True

    def custom_init(self, nart):
        # Create a building within the town.
        building = self.register_element("_EXTERIOR", game.content.ghterrain.ResidentialBuilding(
            waypoints={"DOOR": ghwaypoints.ScreenDoor(name="Bronze Horse Inn")},
            tags=[pbge.randmaps.CITY_GRID_ROAD_OVERLAP]), dident="LOCALE")

        # Add the interior scene.
        team1 = teams.Team(name="Player Team")
        team2 = self.register_element("FOYER_TEAM", teams.Team(name="Civilian Team"))
        intscene = gears.GearHeadScene(50, 35, "Bronze Horse Inn", player_team=team1, civilian_team=team2,
                                       attributes=(gears.tags.SCENE_PUBLIC, gears.tags.SCENE_MEETING),
                                       scale=gears.scale.HumanScale)
        intscenegen = pbge.randmaps.PackedBuildingGenerator(intscene, game.content.gharchitecture.ResidentialBuilding())
        self.register_scene(nart, intscene, intscenegen, ident="INTERIOR", dident="LOCALE")
        foyer = self.register_element('_introom', pbge.randmaps.rooms.ClosedRoom(width=10, height=10,
                                                                                 anchor=pbge.randmaps.anchors.south,
                                                                                 decorate=game.content.gharchitecture.ResidentialDecor()),
                                      dident="INTERIOR")
        foyer.contents.append(team2)

        mycon2 = game.content.plotutility.TownBuildingConnection(self, self.elements["LOCALE"], intscene,
                                                                 room1=building,
                                                                 room2=foyer, door1=building.waypoints["DOOR"],
                                                                 move_door1=False)

        museum = self.register_element('_museum', pbge.randmaps.rooms.ClosedRoom(width=10, height=10),
                                      dident="INTERIOR")
        museum.contents.append(ghwaypoints.BuruBuruModel(desc="The BuruBuru is arguably the most popular mecha in the world. It is cheap, durable, and versatile. This may not be the most glamorous mecha you'll ever pilot, but at least it's better than having to ride an Ice Wind."))
        museum.contents.append(ghwaypoints.KojedoModel(desc="The Kojedo is a new mecha designed by Biocorp for the Terran Defense Force. It's not exactly a replacement for the Corsair, more of a companion. This mecha packs some heavy firepower and an electronic warfare system."))
        museum.contents.append(ghwaypoints.GladiusModel(desc="Since NT152, the Gladius mecha has been awarded to the winner of Snake Lake City's annual Robot Warriors competition. This makes it one of the rarest mecha in the world since only five of them have been constructed so far. The Gladius is based on a Savin frame, but has been heavily modified by the Ran Magnus workshop."))
        museum.contents.append(ghwaypoints.GoldPlaque(desc="This plaque confirms that the BRONZE HORSE INN has been designated an official CAVALIER CLUB by the PRO DUELIST ASSOCIATION."))
        museum.contents.append(ghwaypoints.VadelModel(desc="For sixty years the Vadel has been Earth's foremost high end sports battroid. Designed and built right here in Wujung, this mecha combines unsurpassed speed with a versatile array of powerful weapons."))
        museum.contents.append(ghwaypoints.HarpyModel(desc="The Harpy transatmospheric fighter is a hybrid aerobatroid used by the Solar Navy. This is one nasty piece of work. Its heavy missiles can take down an entire lance at once, then it swoops in and picks off the survivors with twin laser cannons. Avoid avoid avoid. Unless you're the one piloting it, in which case enjoy."))
        museum.contents.append(ghwaypoints.ClaymoreModel(desc="The Claymore holds the distinction of being the oldest mecha design still in production. It may be heavy and slow, but it is also well armored and usually loaded with enough firepower to raze a small city."))
        team3 = self.register_element("MUSEUM_TEAM", teams.Team(name="Museum Team"))
        museum.contents.append(team3)

        # Add the elevator to the guest rooms- this can be used by subplots to also visit lancemate rooms and other stuff.

        osmund = gears.base.Character(name="Osmund", statline={gears.stats.Reflexes: 17,
                                                               gears.stats.Body: 16, gears.stats.Speed: 14,
                                                               gears.stats.Perception: 13,
                                                               gears.stats.Knowledge: 13, gears.stats.Craft: 7,
                                                               gears.stats.Ego: 9,
                                                               gears.stats.Charm: 15, gears.stats.MechaPiloting: 7,
                                                               gears.stats.MechaGunnery: 7,
                                                               gears.stats.MechaFighting: 7,
                                                               gears.stats.Negotiation: 8}, birth_year=102,
                                      portrait='card_m_osmund.png',
                                      personality=[personality.Sociable, personality.Passionate, personality.Fellowship,
                                                   personality.DeadZone],
                                      colors=(gears.color.Straw, gears.color.TannedSkin, gears.color.PlasmaBlue,
                                              gears.color.Gold, gears.color.AceScarlet),
                                      gender=gears.genderobj.Gender.get_default_male(),
                                      job=gears.jobs.ALL_JOBS["Innkeeper"], renown=65, combatant=True)

        team2.contents.append(osmund)
        self.register_element("INNKEEPER", osmund)
        self.did_intro = False
        self.told_about_services = False
        self.gave_mission = False
        self.mission_seed = missionbuilder.BuildAMissionSeed(
            nart.camp,"Help Osmund's Friend",(self.elements["METROSCENE"],self.elements["MISSION_GATE"]),
            objectives=(missionbuilder.BAMO_CAPTURE_THE_MINE,missionbuilder.BAMO_NEUTRALIZE_ALL_DRONES),cash_reward=500,
            architecture = gharchitecture.MechaScaleSemiDeadzone,
            enemy_faction=plotutility.RandomBanditCircle(nart.camp),
            win_message = "You have liberated the mining camp from the bandits who stole it.",
            one_chance = False
        )

        self.osmund_info = (
            OneShotInfoBlast("cavaliers",
                             "Freelance mecha pilots. Some people prefer the term mercenaries, or adventurers. Cavalier is what I used to call myself back when I was doing that sort of work."),
            OneShotInfoBlast("the Bronze Horse",
                             "In PreZero times, around this area, a bronze medallion with a horse on it was the symbol of a special agent. These agents were heroes of the common people; they'd go around fixing problems and punishing the slagheads who abused their power. Kind of like cavaliers do today."),
            OneShotInfoBlast("lancemates",
                             "You won't get very far around here if you try running off by yourself; you'll get even less far if you head out into the dead zone. Try talking to some of the pilots here and see if you can get them to join you. Come back and see me when you get three lancemates and I may have some work for you."),
            OneShotInfoBlast("the dead zone",
                             "Well, the dead zone is kind of a funny name, because really it's a whole lot of different places. All that area to the west of here, where life hasn't really recovered since the Night of Fire. Of course that doesn't mean there's nobody there. I'm from the dead zone myself, originally."),
            OneShotInfoBlast("the Night of Fire",
                             "You didn't pay much attention in school, did you? The nuclear war that ended the Age of Superpowers and created the world as we knows it now. They say that two thirds of everybody alive was dead in a week."),
        )

        self.add_sub_plot(nart, "DZD_BHIRandomLancemate")
        self.add_sub_plot(nart, "DZD_BHIRandomLancemate")
        #self.add_sub_plot(nart, "DZD_BHIRandomLancemate")

        return True

    def _do_intro(self, camp):
        self.did_intro = True

    def _tell_about_services(self, camp):
        self.told_about_services = True

    def INNKEEPER_offers(self, camp):
        mylist = list()

        if self.did_intro:
            mylist.append(Offer("[HELLO] [_BRONZE_HORSE_SPIEL]",
                                context=ContextTag([context.HELLO]),
                                ))
        else:
            mylist.append(Offer(
                "[HELLO] I am the owner of the Bronze Horse Inn; our facilities were designed especially for cavaliers. If you need a place to stay or just want to pick up some lancemates you've come to the right place.",
                context=ContextTag([context.HELLO]), effect=self._do_intro
                ))
        if not self.told_about_services:
            mylist.append(Offer("While you rest in one of our suites, your mecha will be taken care of in our offsite hangar with full repair and customization services. We have a physical training room, a mecha museum, and a twenty four hour breakfast buffet. It's everything a cavalier could want.",
                                context=ContextTag([context.INFO]), effect=self._tell_about_services,
                                data={"subject": "your services"}, no_repeats=True,
                                ))
        if self.did_intro and not self.gave_mission and len(camp.get_lancemates()) >= 3:
            mylist.append(Offer("[HELLO] You know, A friend of mine has a problem that you might be able to help with...",
                                context=ContextTag([context.HELLO]),
                                ))
            mylist.append(
                Offer("A buddy of mine from back home set up a robotic mining operation just outside of Last Hope. Unfortunately, as soon as she started hitting the good stuff, a gang of bandits rolled in and took over the site for themselves. What I'd like you to do is go clear 'em out.",
                      context=ContextTag([context.MISSION]),subject=self,subject_start=True
                      ))
            mylist.append(
                Offer(
                    "Fantastic. You can access the mission by heading to the West Gate of Wujung and following the nav coordinates I'm sending to you now. [GOODLUCK]",
                    context=ContextTag([context.ACCEPT]), subject=self, effect=self._accept_mission
                    ))
            mylist.append(
                Offer(
                    "[UNDERSTOOD] You're going to want to keep your eyes open for mission offers, though, since they're the main way for cavaliers to earn money.",
                    context=ContextTag([context.DENY]), subject=self, effect=self._deny_mission
                ))
        for inf in self.osmund_info:
            if inf.active:
                mylist.append(inf.build_offer())

        return mylist

    def _accept_mission(self,camp):
        missionbuilder.NewMissionNotification(self.mission_seed.name,self.elements["MISSION_GATE"])
        self.gave_mission = True

    def _deny_mission(self,camp):
        self.gave_mission = True
        self.mission_seed = None

    def MISSION_GATE_menu(self, camp, thingmenu):
        if self.mission_seed and self.gave_mission:
            thingmenu.add_item(self.mission_seed.name, self.mission_seed)

    def t_UPDATE(self, camp):
        # If the adventure has ended, get rid of it.
        if self.mission_seed and self.mission_seed.ended:
            self.mission_seed = None

    def get_dialogue_grammar(self, npc, camp):
        mygram = dict()
        if camp.scene.get_root_scene() is self.elements["LOCALE"]:
            # This is an NPC in Wujung. Give them some news.
            mygram["[_BRONZE_HORSE_SPIEL]"] = [
                "Let me know if you need any help.", "Have you met the other cavaliers staying here?",
                "I hope you enjoy your stay at the Bronze Horse Inn.",
                "This is the best place in town to find lancemates."
            ]

        return mygram


#   ********************************
#   ***  DZD_BHIRandomLancemate  ***
#   ********************************
#
# A random lancemate for the Bronze Horse Inn in Wujung.

class DZD_BHIRandomLancemate(Plot):
    LABEL = "DZD_BHIRandomLancemate"
    UNIQUE = True

    def custom_init(self, nart):
        npc = gears.selector.random_character(rank=random.randint(10, 50),
                                              mecha_colors=gears.color.random_mecha_colors(),
                                              local_tags=tuple(self.elements["LOCALE"].attributes),
                                              combatant=True)
        self.register_element("NPC", npc, dident=random.choice(("MUSEUM_TEAM","FOYER_TEAM")))
        self.add_sub_plot(nart, "RLM_Relationship")
        return True


class DZD_BHIAdventurer(Plot):
    LABEL = "DZD_BHIRandomLancemate"
    UNIQUE = True
    JOBS = ("Soldier", "Mecha Pilot", "Scavenger", "Arena Pilot", "Martial Artist", "Test Pilot", "Mercenary")

    def custom_init(self, nart):
        npc = gears.selector.random_character(job=gears.jobs.ALL_JOBS[random.choice(self.JOBS)],
                                              rank=random.randint(10, 50),
                                              mecha_colors=gears.color.random_mecha_colors(),
                                              local_tags=tuple(self.elements["LOCALE"].attributes),
                                              combatant=True)
        self.register_element("NPC", npc, dident="FOYER_TEAM")
        self.add_sub_plot(nart, "RLM_Relationship")
        return True


class DZD_BHIScout(Plot):
    LABEL = "DZD_BHIRandomLancemate"
    UNIQUE = True
    JOBS = ("Bounty Hunter", "Recon Pilot", "Thief", "Explorer")

    def custom_init(self, nart):
        npc = gears.selector.random_character(job=gears.jobs.ALL_JOBS[random.choice(self.JOBS)],
                                              rank=random.randint(10, 50),
                                              mecha_colors=gears.color.random_mecha_colors(),
                                              local_tags=tuple(self.elements["LOCALE"].attributes),
                                              combatant=True)
        self.register_element("NPC", npc, dident=random.choice(("MUSEUM_TEAM","FOYER_TEAM")))
        self.add_sub_plot(nart, "RLM_Relationship")
        return True




class DZD_BlueFortressHQ(Plot):
    LABEL = "DZDHB_BlueFortress"

    active = True
    scope = True

    def custom_init(self, nart):
        # Create a building within the town.
        building = self.register_element("_EXTERIOR", game.content.ghterrain.BrickBuilding(
            waypoints={"DOOR": ghwaypoints.ScrapIronDoor(name="Blue Fortress")},
            tags=[pbge.randmaps.CITY_GRID_ROAD_OVERLAP]), dident="LOCALE")

        # Add the interior scene.
        team1 = teams.Team(name="Player Team")
        team2 = teams.Team(name="Civilian Team")
        intscene = gears.GearHeadScene(35, 35, "Blue Fortress", player_team=team1, civilian_team=team2,
                                       attributes=(gears.tags.SCENE_PUBLIC, gears.tags.SCENE_BASE),
                                       scale=gears.scale.HumanScale, faction=factions.TerranDefenseForce)
        intscenegen = pbge.randmaps.PackedBuildingGenerator(intscene, game.content.gharchitecture.DefaultBuilding())
        self.register_scene(nart, intscene, intscenegen, ident="INTERIOR", dident="LOCALE")
        foyer = self.register_element('_introom', pbge.randmaps.rooms.ClosedRoom(anchor=pbge.randmaps.anchors.south),
                                      dident="INTERIOR")

        foyer.contents.append(ghwaypoints.StatueM(
            desc="""General Jae "Ripper Turtle" Cauchi is generally considered the first Post-Zero ruler of Wujung, and by extension the founder of the Terran Defense Force. His army united all of the local settlements under a single banner by NT37.\n His epithet is thought to derive from his habit of executing rivals by casting them into a pit of mutant carnivorous tortoises."""))
        foyer.contents.append(ghwaypoints.StatueF(
            desc="""General Anna "The Pure" Greencrown was originally one of General Cauchi's lieutenants. She was instrumental in quashing the Ipshil Pirate Insurrection. Greencrown succeeded Cauchi as leader of Wujung following his mysterious death from blood loss in NT41.\n Following the Data Miner's Rebellion in NT59, Greencrown voluntarily retired from politics, ushering in a new age of peace and democracy."""))
        foyer.contents.append(ghwaypoints.GoldPlaque(desc="""The Terran Defense Force\n Blue Fortress"""))

        mycon2 = game.content.plotutility.TownBuildingConnection(self, self.elements["LOCALE"], intscene,
                                                                 room1=building,
                                                                 room2=foyer, door1=building.waypoints["DOOR"],
                                                                 move_door1=False)

        npc = self.register_element("DISPATCHER",
                                    gears.selector.random_character(random.randint(26, 70),
                                                                    local_tags=self.elements["LOCALE"].attributes,
                                                                    faction=factions.TerranDefenseForce,
                                                                    job=gears.jobs.ALL_JOBS["Commander"]), lock=True)
        npc.place(intscene, team=team2)

        self.adventure_seed = None
        self.next_enemy_faction = self.generate_enemy_faction()
        #self.register_adventure(nart.camp)

        room2 = self.register_element('_room2', pbge.randmaps.rooms.ClosedRoom(), dident="INTERIOR")
        team3 = teams.Team(name="Lounge Team")
        room2.contents.append(ghwaypoints.EarthMap())
        for t in range(random.randint(3,7)):
            room2.contents.append(ghwaypoints.Lockers())

        vikki = gears.base.Character(name="Vikki",statline={gears.stats.Reflexes:15,
         gears.stats.Body:10,gears.stats.Speed:13,gears.stats.Perception:13,
         gears.stats.Knowledge:10,gears.stats.Craft:10,gears.stats.Ego:10,
         gears.stats.Charm:12}, mecha_pref = "THD-35 Thorshammer",
         job=gears.jobs.ALL_JOBS["Mecha Pilot"], renown=50, birth_year=138, combatant=True, faction=gears.factions.TerranDefenseForce,
         personality=[personality.Cheerful,personality.Shy,personality.Fellowship], mnpcid=gears.oldghloader.GH1Loader.NPC_VIKKI,
         gender=gears.genderobj.Gender.get_default_female(),portrait='card_f_vikki_dzd.png',
         colors=(gears.color.ShiningWhite,gears.color.LightSkin,gears.color.NobleGold,gears.color.HunterOrange,gears.color.Olive),
         mecha_colors=(gears.color.ShiningWhite,gears.color.Olive,gears.color.ElectricYellow,gears.color.GullGrey,gears.color.Terracotta))
        self.register_element( "VIKKI", vikki )
        vikki.place(intscene, team=team3)

        return True

    def MISSION_GATE_menu(self, camp, thingmenu):
        if self.adventure_seed:
            thingmenu.add_item(self.adventure_seed.name, self.adventure_seed)

    ENEMY_FACTIONS = (factions.AegisOverlord, factions.AegisOverlord, factions.AegisOverlord,
                      factions.BoneDevils, factions.BoneDevils, factions.BladesOfCrihna)

    def generate_enemy_faction(self):
        # Randomly determine an enemy faction.
        return random.choice(self.ENEMY_FACTIONS)

    def register_adventure(self, camp):
        self.adventure_seed = CombatMissionSeed(camp, "{}'s Mission".format(self.elements["DISPATCHER"]),
                                                (self.elements["LOCALE"], self.elements["MISSION_GATE"]),
                                                enemy_faction=self.next_enemy_faction,
                                                allied_faction=factions.TerranDefenseForce)
        missionbuilder.NewMissionNotification(self.adventure_seed.name,self.elements["MISSION_GATE"])

    def t_UPDATE(self, camp):
        # If the adventure has ended, get rid of it.
        if self.adventure_seed and self.adventure_seed.ended:
            self.adventure_seed = None
            self.next_enemy_faction = self.generate_enemy_faction()

    def DISPATCHER_offers(self, camp):
        mylist = list()

        if not self.adventure_seed:
            mylist.append(
                Offer(
                    "The Defense Force is short handed at the moment, so there are always missions available. [MechaMissionVsEnemyFaction]; [IWillSendMissionDetails].",
                    context=ContextTag([context.MISSION, ]), effect=self.register_adventure, data={"enemy_faction":self.next_enemy_faction.name}
                )
            )

        return mylist


class DZD_AlliedArmor(Plot):
    LABEL = "DZDHB_AlliedArmor"

    active = True
    scope = "INTERIOR"

    def custom_init(self, nart):
        # Create a building within the town.
        building = self.register_element("_EXTERIOR", game.content.ghterrain.BrickBuilding(
            waypoints={"DOOR": ghwaypoints.ScrapIronDoor(name="Allied Armor")},
            door_sign=(game.content.ghterrain.AlliedArmorSignEast, game.content.ghterrain.AlliedArmorSignSouth),
            tags=[pbge.randmaps.CITY_GRID_ROAD_OVERLAP]), dident="LOCALE")

        # Add the interior scene.
        team1 = teams.Team(name="Player Team")
        team2 = teams.Team(name="Civilian Team", allies=(team1,))
        intscene = gears.GearHeadScene(50, 40, "Allied Armor", player_team=team1, civilian_team=team2,
                                       attributes=(
                                       gears.tags.SCENE_PUBLIC, gears.tags.SCENE_SHOP, gears.tags.SCENE_GARAGE),
                                       scale=gears.scale.HumanScale)
        intscenegen = pbge.randmaps.PackedBuildingGenerator(intscene, game.content.gharchitecture.CommercialBuilding())
        self.register_scene(nart, intscene, intscenegen, ident="INTERIOR", dident="LOCALE")
        foyer = self.register_element('_introom', pbge.randmaps.rooms.ClosedRoom(anchor=pbge.randmaps.anchors.south),
                                      dident="INTERIOR")
        foyer.contents.append(ghwaypoints.AlliedArmorSignWP())
        foyer.contents.append(team2)

        mycon2 = game.content.plotutility.TownBuildingConnection(self, self.elements["LOCALE"], intscene,
                                                                 room1=building,
                                                                 room2=foyer, door1=building.waypoints["DOOR"],
                                                                 move_door1=False)

        npc = self.register_element("SHOPKEEPER",
                                    gears.selector.random_character(50, local_tags=self.elements["LOCALE"].attributes,
                                                                    job=gears.jobs.ALL_JOBS["Shopkeeper"]))
        team2.contents.append(npc)

        self.shop = services.Shop(npc=npc, shop_faction=gears.factions.TerranDefenseForce, rank=50)

        custom_shop = pbge.randmaps.rooms.ClosedRoom(parent=intscene)
        npc2 = self.register_element("MECHANIC",
                                     gears.selector.random_character(50, local_tags=self.elements["LOCALE"].attributes,
                                                                     job=gears.jobs.ALL_JOBS["Mechanic"]))
        team3 = teams.Team(name="Custom Shop Team", allies=(team1, team2))
        team3.contents.append(npc2)
        custom_shop.contents.append(team3)
        custom_shop.contents.append(ghwaypoints.MechEngTerminal())
        self.custom_shop = services.Shop(npc=npc2, shop_faction=gears.factions.TerranDefenseForce,
                                         ware_types=services.MECHA_PARTS_STORE,rank=50)

        self.asked_about_terminal = False

        secretstairs = self.register_element("STAIRSDOWN",ghwaypoints.Bookshelf(name="Bookshelf",plot_locked=True))
        foyer.contents.append(secretstairs)

        otherscene = gears.GearHeadScene(50, 40, "Secret Scene", player_team=team1,
                                       scale=gears.scale.HumanScale)
        intscenegen = pbge.randmaps.SceneGenerator(otherscene, game.content.gharchitecture.CommercialBuilding())
        self.register_scene(nart, otherscene, intscenegen, ident="OTHERSCENE", dident="INTERIOR")
        hiddenroom = pbge.randmaps.rooms.ClosedRoom()
        otherscene.contents.append(hiddenroom)
        mystairs = self.register_element("STAIRSUP",ghwaypoints.StoneStairsUp(dest_scene=intscene,dest_entrance=secretstairs))
        hiddenroom.contents.append(mystairs)

        return True

    def STAIRSDOWN_menu(self,camp,thingmenu):
        thingmenu.desc = "You stand before a bookshelf. Do you want to read a book?"
        thingmenu.add_item("Read black book", self._read_black_book)
        thingmenu.add_item("Read blue book", self._read_blue_book)
        thingmenu.add_item("Read green book", self._read_green_book)
        thingmenu.add_item("Read purple book", self._read_purple_book)
        thingmenu.add_item("Read red book", self._read_red_book)
        thingmenu.add_item("Read white book", self._use_bookshelf)

    def _read_black_book(self,camp):
        # First sentence by me, the rest of the story written by TalkToTransformer.
        pbge.alert("""The black battlemech looked utterly invincible. It struck out a slash from its chest, the mercenary's chest pierced through. The mercenary found that the black battlemech's combat speed and its lethal reflexes were far surpassing that of the robot. At the same time, the mercenary could feel how quick the black battlemech was on its movements.\n \n Vayu punched back, swinging his spear, a wooden sword, even though the axe came in seconds. The black battlemech didn't even show any reaction at all.\n \n This opponent was very tough.""")

    def _read_blue_book(self,camp):
        # First sentence by me, the rest of the story written by TalkToTransformer.
        pbge.alert("""All that stood between the space pirates and the treasure was a lone blue mecha. It seemed to be at the point of becoming an ordinary mecha.\n \n That was the one the pirates had called a new type of mecha, one that defeated enemy machines in a single blow. They were machines that changed shapes and could create weapons.\n \n These were ZEBES, what the space pirates had named this mecha.\n \n Thinking of ZEBES, Thomas muttered "All the metal on that one is metal. Looks like its ability is to take the energy".""")

    def _read_green_book(self,camp):
        # First sentence by me, the rest of the story written by TalkToTransformer.
        pbge.alert("""A green mecha rolled into the dead zone. He was an Angel wearing a cape. A great horned helmet with a great ornate skull appeared on his head. He raised his arms, each joint jutting out sharply.\n \n Sasha ripped through space at speeds faster than bullets, but could only manage to keep up with one of the machines, and even then he only managed a glimpse of his face. The Angel helmet had received damage, and was covered in more scars. It made him look scarier.\n \n "Now, this will be fun!" the Angel said.""")

    def _read_purple_book(self,camp):
        # First sentence by me, the rest of the story written by TalkToTransformer.
        pbge.alert("""Carolyn stepped out from the cockpit of her purple mecha. "So he's not being as good as before?"\n \n "Er... well, not in the way you might think," said the mechanic, lowering his shoulder visor and turning his sunglasses to face her.\n \n "Then why is he still so confident?" asked Carolyn. "It doesn't make any sense."\n \n "His taste for politics is legendary," said the mechanic, indicating the facade that had kept Kiri's consciousness isolated and that had been the victim of Kimberly's advances.""")

    def _read_red_book(self,camp):
        # First sentence by me, the rest of the story written by TalkToTransformer.
        pbge.alert("""The battle was going poorly for the defenders, when out of nowhere a red mecha appeared. In the hands of this mecha the industrial city was seemingly taken over by metal, lifting everything that was in the way of the construction project above the buildings. The clock tower and factory buildings were falling in on themselves.\n \n A smile spread on Jondal's face as he saw this. "By the Emperor's clock... this is a miracle of construction."\n \n Conde winced. "What's a miracle of construction? I was raised as an engineer, and our government has a contract that we need a certain percentage to receive." """)

    def _use_bookshelf(self,camp):
        pbge.alert("Moving the white book activates a hidden staircase!")
        camp.destination,camp.entrance = self.elements["OTHERSCENE"],self.elements["STAIRSUP"]

    def _ask_about_terminal(self, camp):
        self.asked_about_terminal = True

    def MECHANIC_offers(self, camp):
        mylist = list()

        mylist.append(Offer(
            "[HELLO] This is the Allied Armor custom shop; we sell all kinds of mecha upgrades and replacement parts.",
            context=ContextTag([context.HELLO]),
            ))

        mylist.append(Offer("[OPENSHOP]",
                            context=ContextTag([context.OPEN_SHOP]), effect=self.custom_shop,
                            data={"shop_name": "the Allied Armor customization shop", "wares": "parts"}
                            ))

        if not self.asked_about_terminal:
            mylist.append(Offer(
                "That's a mecha engineering terminal. You can find them at garages and shops all over the place. It's out of order right now, but should be working soon.",
                context=ContextTag([context.INFO]), effect=self._ask_about_terminal,
                data={"subject": "the terminal"}, no_repeats=True,
                ))

        return mylist

    def SHOPKEEPER_offers(self, camp):
        mylist = list()

        mylist.append(Offer("[HELLO] Allied Armor is Wujung's best source for mecha and custom parts.",
                            context=ContextTag([context.HELLO]),
                            ))

        mylist.append(Offer("[OPENSHOP]",
                            context=ContextTag([context.OPEN_SHOP]), effect=self.shop,
                            data={"shop_name": "Allied Armor", "wares": "mecha"}
                            ))

        return mylist


class DZD_EliteEquipment(Plot):
    LABEL = "DZDHB_EliteEquipment"

    active = True
    scope = "INTERIOR"

    def custom_init(self, nart):
        # Create a building within the town.
        building = self.register_element("_EXTERIOR", game.content.ghterrain.BrickBuilding(
            waypoints={"DOOR": ghwaypoints.ScrapIronDoor(name="Elite Equipment")},
            tags=[pbge.randmaps.CITY_GRID_ROAD_OVERLAP]), dident="LOCALE")

        # Add the interior scene.
        team1 = teams.Team(name="Player Team")
        team2 = teams.Team(name="Civilian Team")
        intscene = gears.GearHeadScene(35, 35, "Elite Equipment", player_team=team1, civilian_team=team2,
                                       attributes=(gears.tags.SCENE_PUBLIC, gears.tags.SCENE_SHOP),
                                       scale=gears.scale.HumanScale)
        intscenegen = pbge.randmaps.SceneGenerator(intscene, game.content.gharchitecture.CommercialBuilding())
        self.register_scene(nart, intscene, intscenegen, ident="INTERIOR", dident="LOCALE")
        foyer = self.register_element('_introom', pbge.randmaps.rooms.ClosedRoom(anchor=pbge.randmaps.anchors.south,
                                                                                 decorate=game.content.gharchitecture.CheeseShopDecor()),
                                      dident="INTERIOR")

        mycon2 = game.content.plotutility.TownBuildingConnection(self, self.elements["LOCALE"], intscene,
                                                                 room1=building,
                                                                 room2=foyer, door1=building.waypoints["DOOR"],
                                                                 move_door1=False)

        npc = self.register_element("SHOPKEEPER",
                                    gears.selector.random_character(50, local_tags=self.elements["LOCALE"].attributes,
                                                                    job=gears.jobs.ALL_JOBS["Shopkeeper"]))
        npc.place(intscene, team=team2)

        self.shop = services.Shop(npc=npc, shop_faction=gears.factions.TerranDefenseForce,
                                  ware_types=services.GENERAL_STORE)

        return True

    def SHOPKEEPER_offers(self, camp):
        mylist = list()

        mylist.append(Offer("[HELLO] Elite Equipment is your one stop source for deadzone survival gear.",
                            context=ContextTag([context.HELLO]),
                            ))

        mylist.append(Offer("[OPENSHOP]",
                            context=ContextTag([context.OPEN_SHOP]), effect=self.shop,
                            data={"shop_name": "Elite Equipment", "wares": "gear"},
                            ))

        return mylist


class DZD_WujungHospital(Plot):
    LABEL = "DZDHB_WujungHospital"

    active = True
    scope = "INTERIOR"

    def custom_init(self, nart):
        # Create a building within the town.
        building = self.register_element("_EXTERIOR", game.content.ghterrain.WhiteBrickBuilding(
            waypoints={"DOOR": ghwaypoints.WoodenDoor(name="Wujung Hospital")},
            door_sign=(game.content.ghterrain.HospitalSignEast, game.content.ghterrain.HospitalSignSouth),
            tags=[pbge.randmaps.CITY_GRID_ROAD_OVERLAP]), dident="LOCALE")

        # Add the interior scene.
        team1 = teams.Team(name="Player Team")
        team2 = self.register_element("CIV_TEAM",teams.Team(name="Civilian Team"))
        intscene = gears.GearHeadScene(35, 35, "Wujung Hospital", player_team=team1, civilian_team=team2,
                                       attributes=(gears.tags.SCENE_PUBLIC, gears.tags.SCENE_HOSPITAL),
                                       scale=gears.scale.HumanScale)
        intscenegen = pbge.randmaps.PackedBuildingGenerator(intscene, game.content.gharchitecture.HospitalBuilding())
        self.register_scene(nart, intscene, intscenegen, ident="INTERIOR", dident="LOCALE")
        foyer = self.register_element('_introom', pbge.randmaps.rooms.ClosedRoom(anchor=pbge.randmaps.anchors.south, ),
                                      dident="INTERIOR")
        foyer.contents.append(team2)

        mycon2 = game.content.plotutility.TownBuildingConnection(self, self.elements["LOCALE"], intscene,
                                                                 room1=building,
                                                                 room2=foyer, door1=building.waypoints["DOOR"],
                                                                 move_door1=False)

        npc = self.register_element("DOCTOR",
                                    gears.selector.random_character(50, local_tags=self.elements["LOCALE"].attributes,
                                                                    job=gears.jobs.ALL_JOBS["Doctor"]))
        npc.place(intscene, team=team2)

        npc = self.register_element("NURSE",
                                    gears.selector.random_character(50, local_tags=self.elements["LOCALE"].attributes,
                                                                    job=gears.jobs.ALL_JOBS["Nurse"]))
        npc.place(intscene, team=team2)

        room2 = self.register_element('_room2', pbge.randmaps.rooms.ClosedRoom(),dident="INTERIOR")
        room2.contents.append(ghwaypoints.RecoveryBed())
        room2.contents.append(ghwaypoints.RecoveryBed())

        room5 = self.register_element('_room5', pbge.randmaps.rooms.ClosedRoom(decorate=gharchitecture.UlsaniteOfficeDecor()),dident="INTERIOR")

        team5 = teams.Team(name="BioCorp Team")
        room5.contents.append(team5)
        npc = self.register_element("BIOCORPNPC",
                                    gears.selector.random_character(30, local_tags=self.elements["LOCALE"].attributes,
                                                                    faction=gears.factions.BioCorp, job=gears.jobs.ALL_JOBS["Researcher"]))
        team5.contents.append(npc)
        self._asked_about_bc_mission = False
        self._asked_about_biomonsters = False
        self._hamster_state = 0

        cage = self.register_element("_HAMSTER", ghwaypoints.HamsterCage(name="Hamster Cage",desc="You stand before a cage of cute, fluffy hamsters. Oddly, all of the hamsters appear to be walking on their back legs. Other than that they seem perfectly normal and content.",plot_locked=True))
        room5.contents.append(cage)

        self.add_sub_plot(nart,"DZD_WuHosMedicLancemate")

        return True

    def BIOCORPNPC_offers(self, camp):
        mylist = list()

        mylist.append(Offer(
            "[HELLO] This is the BioCorp Medical Research Office. We coordinate efforts between the main office in Snake Lake and projects like Mesa Lab in Last Hope and the various expeditions currently working in the dead zone.",
            context=ContextTag([context.HELLO]),
        ))

        if not self._asked_about_bc_mission:
            mylist.append(Offer(
                "No mission exactly, but if you're heading into the dead zone there may be something you can do for me. BioCorp is offering cash rewards for lostech artifacts or any data regarding PreZero synthoid technology. If you find anything interesting during your travels I can pay you for the information.",
                context=ContextTag([context.MISSION]), subject_start=True, subject=self, effect=self._tell_about_bc_mission
            ))
        mylist.append(Offer(
            "[GOOD] I look forward to hearing about what you find out there.",
            context=ContextTag([context.ACCEPT]), subject=self
        ))
        mylist.append(Offer(
            "[UNDERSTOOD] The offer remains, if you ever change your mind.",
            context=ContextTag([context.DENY]), subject=self
        ))

        if not self._asked_about_biomonsters:
            mylist.append(Offer(
                "What, you think that just because this is a BioCorp office we're going to have Hunter-X synths running around all over the place?! BioCorp has been out of the autonomous bioweapon business for thirty years now. Seriously, you raze one tiny village to the ground with an experiment gone horribly wrong and they never let you forget...",
                context=ContextTag([context.CUSTOM]), effect=self._tell_about_biomonsters,
                data={"reply": "I expected this place to be full of biomonsters."}, no_repeats=True,
            ))

        if self._hamster_state == 1:
            mylist.append(Offer(
                "They are my pets. They're 'golden tallboys', imported from Amazonia. People say they're supposed to be highly intelligent but mine are only interested in eating and sleeping. Still, they're good company for the nights when I have to work overtime.",
                context=ContextTag([context.INFO]), effect=self._tell_about_hamsters,
                data={"subject": "those hamsters"}, no_repeats=True,
            ))

        return mylist

    def _tell_about_hamsters(self, camp):
        self._hamster_state = 2

    def _tell_about_biomonsters(self, camp):
        self._asked_about_biomonsters = True

    def _tell_about_bc_mission(self,camp):
        self._asked_about_bc_mission = True

    def _HAMSTER_BUMP(self, camp):
        if self._hamster_state == 0:
            self._hamster_state = 1

    def _HAMSTER_menu(self, camp, thingmenu):
        thingmenu.add_item("Pet the hamsters.", self._pet_hamster)
        thingmenu.add_item("Leave the hamsters alone.", None)

    def _pet_hamster(self,camp):
        pbge.alert("You play with the hamsters for a little while and make some new friends.")

    def DOCTOR_offers(self, camp):
        mylist = list()

        mylist.append(Offer("[HELLO] You seem to be in good health today.",
                            context=ContextTag([context.HELLO]),
                            ))

        return mylist

#   *********************************
#   ***  DZD_WuHosMedicLancemate  ***
#   *********************************
#
# A random lancemate for Wujung Hospital.

class DZD_WuHosMedicLancemate(Plot):
    LABEL = "DZD_WuHosMedicLancemate"
    JOBS = ("Paramedic","Field Medic","Firefighter","Paramedic","Firefighter","Doctor","Nurse","Paramedic")
    def custom_init(self, nart):
        npc = gears.selector.random_character(job=gears.jobs.ALL_JOBS[random.choice(self.JOBS)],
                                              rank=random.randint(10, 50),
                                              mecha_colors=gears.color.random_mecha_colors(),
                                              local_tags=tuple(self.elements["LOCALE"].attributes),
                                              combatant=True)
        self.register_element("NPC", npc, dident="CIV_TEAM")
        self.add_sub_plot(nart, "RLM_Relationship")
        return True



class DZD_LongRoadLogistics(Plot):
    LABEL = "DZDHB_LongRoadLogistics"

    active = True
    scope = "INTERIOR"

    def custom_init(self, nart):
        # Create a building within the town.
        building = self.register_element("_EXTERIOR", game.content.ghterrain.BrickBuilding(
            waypoints={"DOOR": ghwaypoints.WoodenDoor(name="Long Road Logistics")},
            tags=[pbge.randmaps.CITY_GRID_ROAD_OVERLAP]), dident="LOCALE")

        # Add the interior scene.
        team1 = teams.Team(name="Player Team")
        team2 = self.register_element("CIV_TEAM",teams.Team(name="Civilian Team"))
        intscene = gears.GearHeadScene(50, 50, "Long Road Logistics", player_team=team1, civilian_team=team2,
                                       attributes=(
                                       gears.tags.SCENE_PUBLIC, gears.tags.SCENE_GARAGE, gears.tags.SCENE_TRANSPORT),
                                       scale=gears.scale.HumanScale)
        intscenegen = pbge.randmaps.PackedBuildingGenerator(intscene, game.content.gharchitecture.IndustrialBuilding())
        self.register_scene(nart, intscene, intscenegen, ident="INTERIOR", dident="LOCALE")
        foyer = self.register_element('_introom', pbge.randmaps.rooms.MostlyOpenRoom(12,15,anchor=pbge.randmaps.anchors.south, ),
                                      dident="INTERIOR")
        foyer.contents.append(team2)
        for t in range(random.randint(5,12)):
            foyer.contents.append(ghwaypoints.ShippingShelves())

        mycon2 = game.content.plotutility.TownBuildingConnection(self, self.elements["LOCALE"], intscene,
                                                                 room1=building,
                                                                 room2=foyer, door1=building.waypoints["DOOR"],
                                                                 move_door1=False)

        npc = self.register_element("DISPATCHER",
                                    gears.selector.random_character(50, local_tags=self.elements["LOCALE"].attributes,
                                                                    job=gears.jobs.ALL_JOBS["Dispatcher"]))
        npc.place(intscene, team=team2)

        npc = self.register_element("TRUCKER",
                                    gears.selector.random_character(50, local_tags=self.elements["LOCALE"].attributes,
                                                                    job=gears.jobs.ALL_JOBS["Trucker"]))
        npc.place(intscene, team=team2)

        room2 = self.register_element('_room2', pbge.randmaps.rooms.ClosedRoom(decorate=gharchitecture.StorageRoomDecor()),dident="INTERIOR")
        room3 = self.register_element('_room3', pbge.randmaps.rooms.ClosedRoom(decorate=gharchitecture.StorageRoomDecor()),dident="INTERIOR")
        room4 = self.register_element('regex_room', pbge.randmaps.rooms.MostlyOpenRoom(decorate=gharchitecture.UlsaniteOfficeDecor()),dident="INTERIOR")
        room5 = self.register_element('kettel_room', pbge.randmaps.rooms.MostlyOpenRoom(decorate=gharchitecture.UlsaniteOfficeDecor()),dident="INTERIOR")

        room4.contents.append(ghwaypoints.RegExLogo())
        team4 = teams.Team(name="RegEx Team")
        room4.contents.append(team4)
        npc = self.register_element("REGEXNPC",
                                    gears.selector.random_character(30, local_tags=self.elements["LOCALE"].attributes,
                                                                    faction=gears.factions.RegExCorporation, job=gears.jobs.ALL_JOBS["Corporate Executive"]))
        team4.contents.append(npc)
        self._asked_about_construction = False

        self.add_sub_plot(nart,"DZD_LoRoTruckerLancemate")

        return True

    def REGEXNPC_offers(self, camp):
        mylist = list()

        if not self._asked_about_construction:
            mylist.append(Offer(
                "[HELLO] Welcome to RegEx Construction Services, temporarily relocated to the Long Road Industrial Complex since Typhon smooshed the hell out of our old offices last summer.",
                context=ContextTag([context.HELLO]),
            ))
            mylist.append(Offer(
                "I'd love to help, but road security to the dead zone isn't what it used to be. Building a power plant is going to involve lots of materials and heavy machinery. We're going to need a secure transit route from here to {} before we can even talk about starting.".format(self.elements["DZ_TOWN_NAME"]),
                context=ContextTag([context.INFO]), subject=self, subject_start=True,
                data={"subject": "building a new power plant for {}".format(self.elements["DZ_TOWN_NAME"])}, no_repeats=True,
            ))
        else:
            mylist.append(Offer(
                "[HELLO] Any update on the road situation leading to {}?".format(self.elements["DZ_TOWN_NAME"]),
                context=ContextTag([context.HELLO]),
                ))

        mylist.append(Offer(
            "That would be great. More work will help us to rebuild our office faster, and I for one can't wait to get out of this building. It always smells like coffee and magnetic grease in here.",
            context=ContextTag([context.CUSTOM]),subject=self,
            data={"reply": "I'll see what I can do about that."}, effect=self._tell_about_services
        ))

        return mylist

    def _tell_about_services(self,camp):
        self.memo = "You spoke to {REGEXNPC} of RegEx Construction about building a new power plant for {DZ_TOWN_NAME}. In order for {REGEXNPC.gender.object_pronoun} to do that, there must be a secure trade route between there an Wujung.".format(**self.elements)
        self._asked_about_construction = True

    def DISPATCHER_offers(self, camp):
        mylist = list()

        mylist.append(Offer(
            "[HELLO] This is Long Road Logistics. Our job is to keep goods moving from the Joseon green zone through the dead zone all the way to the Pan-Eurasian territories.",
            context=ContextTag([context.HELLO]),
            ))

        return mylist

    def TRUCKER_offers(self, camp):
        mylist = list()

        mylist.append(Offer(
            "[HELLO] Normally I'd get you up to date on how salvage works, but our recovery service is on hold for the time being.",
            context=ContextTag([context.HELLO]),
            ))

        return mylist

#   **********************************
#   ***  DZD_LoRoTruckerLancemate  ***
#   **********************************
#
# A random lancemate for Long Road Logistics

class DZD_LoRoTruckerLancemate(Plot):
    LABEL = "DZD_LoRoTruckerLancemate"
    JOBS = ("Trucker","Mechanic","Construction Worker","Trader","Trucker")
    def custom_init(self, nart):
        npc = gears.selector.random_character(job=gears.jobs.ALL_JOBS[random.choice(self.JOBS)],
                                              rank=random.randint(10, 50),
                                              mecha_colors=gears.color.random_mecha_colors(),
                                              local_tags=tuple(self.elements["LOCALE"].attributes),
                                              combatant=True)
        self.register_element("NPC", npc, dident="CIV_TEAM")
        self.add_sub_plot(nart, "RLM_Relationship")
        return True
