from pbge.plots import Plot
from pbge.dialogue import Offer, ContextTag
from game import teams, services
from game.ghdialogue import context, OneShotInfoBlast
import gears
from gears import factions, personality
import game.content.gharchitecture
import pbge
import game.content.plotutility
from game.content import ghwaypoints, gharchitecture, plotutility, ghrooms, dungeonmaker, ghchallenges
import game.content.ghterrain
from game.content.ghplots.dd_combatmission import CombatMissionSeed
import random
from .dd_main import DZDRoadMapExit
from . import missionbuilder
import collections


class DZD_Wujung(Plot):
    LABEL = "DZD_HOME_BASE"
    active = True
    scope = "METRO"

    # noinspection PyAttributeOutsideInit,PyAttributeOutsideInit,PyAttributeOutsideInit
    # I have no idea what the above comment means. Presumably automatically generated by PyCharm for some reason?
    def custom_init(self, nart):
        team1 = teams.Team(name="Player Team")
        team2 = teams.Team(name="Civilian Team", allies=(team1,))
        myscene = gears.GearHeadScene(50, 50, "Wujung City", player_team=team1, civilian_team=team2,
                                      scale=gears.scale.HumanScale, is_metro=True,
                                      faction=gears.factions.TerranFederation,
                                      attributes=(
                                          gears.personality.GreenZone, gears.tags.City, gears.tags.SCENE_PUBLIC,
                                          gears.tags.SCENE_OUTDOORS),
                                      exploration_music='Heroic Adventure.ogg')

        for t in range(random.randint(2, 5)):
            npc = gears.selector.random_character(30, local_tags=myscene.attributes)
            npc.place(myscene, team=team2)

        myscenegen = pbge.randmaps.CityGridGenerator(myscene, game.content.gharchitecture.HumanScaleGreenzone(),
                                                     road_terrain=game.content.ghterrain.Flagstone)

        self.register_scene(nart, myscene, myscenegen, ident="LOCALE")
        self.register_element("METRO", myscene.metrodat)
        self.register_element("METROSCENE", myscene)

        myroom2 = self.register_element("_ROOM2", pbge.randmaps.rooms.Room(3, 3, anchor=pbge.randmaps.anchors.west),
                                        dident="LOCALE")
        westgate = self.register_element("ENTRANCE", DZDRoadMapExit(roadmap=self.elements["DZ_ROADMAP"],
                                                                    node=self.elements["DZ_NODE"],
                                                                    name="The West Gate",
                                                                    desc="You stand at the western city gate of Wujung. Beyond this point lies the dead zone.",
                                                                    anchor=pbge.randmaps.anchors.west,
                                                                    plot_locked=True), dident="_ROOM2")
        # Gonna register the entrance under another name for the subplots.
        self.register_element("MISSION_GATE", westgate)

        # Setting Wujung to the home base.
        nart.camp.home_base = westgate

        # Add the services.
        tplot = self.add_sub_plot(nart, "DZDHB_WujungTires")
        tplot = self.add_sub_plot(nart, "DZDHB_EliteEquipment")
        tplot = self.add_sub_plot(nart, "DZDHB_BlueFortress")
        tplot = self.add_sub_plot(nart, "DZDHB_BronzeHorseInn")
        tplot = self.add_sub_plot(nart, "DZDHB_WujungHospital")
        tplot = self.add_sub_plot(nart, "DZDHB_LongRoadLogistics")
        tplot = self.add_sub_plot(nart, "DZDHB_WujungGarrison")
        # tplot = self.add_sub_plot(nart, "TEST_DUNGEON")
        # tplot = self.add_sub_plot(nart, "TEST_CHAR_MOVER")
        self.add_sub_plot(nart, "DZD_BLACK_ISLE_PUB")
        # Hwang-Sa Mission
        # Reconstruction Site
        tplot = self.add_sub_plot(nart, "QOL_REPORTER")

        # tplot = self.add_sub_plot(nart, "TAVERN")

        # tplot = self.add_sub_plot(nart, "MECHA_WORKSHOP")
        # plotutility.TownBuildingConnection(self, myscene, tplot.elements["LOCALE"], room2=tplot.elements["FOYER"])

        # Add some local lancemates.
        tplot = self.add_sub_plot(nart, "RANDOM_LANCEMATE")
        tplot = self.add_sub_plot(nart, "RANDOM_LANCEMATE")

        # Test a local problem.
        self.add_sub_plot(nart, "TEST_LOCAL_PROBLEM", necessary=False)

        # Add the random world map encounter objective test.
        self.add_sub_plot(nart, "TEST_RWMO", necessary=False)

        # Add the features
        self.add_sub_plot(nart, "CF_METROSCENE_RECOVERY_HANDLER")
        self.add_sub_plot(nart, "CF_METROSCENE_WME_DEFENSE_HANDLER")
        self.add_sub_plot(nart, "CF_METROSCENE_RANDOM_PLOT_HANDLER")

        # Local info counters.
        self.local_info = (
            OneShotInfoBlast("Wujung",
                             "Wujung is an old fortress-city; it's the home base of the Terran Defense Force and known as the gateway to the Dead Zone. Unfortunately, it's also the first city Typhon attacked."),
            OneShotInfoBlast("Typhon",
                             "Typhon was a biomonster created during the Age of Superpowers. It awoke and attacked Wujung last year... [TyphonDesc]"),
            OneShotInfoBlast("Aegis",
                             "They're the military government that controls [Luna] right now. [chat_lead_in] Aegis operatives are the ones who activated Typhon and led it to Wujung."),
            OneShotInfoBlast("salvage",
                             "After completing a mission, you're entitled to claim any equipment left behind on the battlefield. Of course getting it off the battlefield before someone else nabs it can be a problem. You can up your chances by bringing along a repair expert."),
        )

        self.add_sub_plot(nart, "DZD_SKIPPYSNIGHTOUT")

        self.intro_ready = True

        return True

    def TEST_CHALLENGE_ADVANCE_CHALLENGE(self, camp):
        pass

    def METROSCENE_ENTER(self, camp):
        # Upon entering this scene, deal with any dead or incapacitated party members.
        # Also, deal with party members who have lost their mecha. This may include the PC.
        if self.intro_ready:
            # Give a different entry message depending on the nature of the PC.
            if camp.pc.has_badge("Typhon Slayer"):
                pbge.alert(
                    "You enter Wujung. Your battle with Typhon nearly ended before it began in this very spot. It feels like that happened years ago and a lifetime away... Yet here you are.")
                pbge.alert(
                    "The Bronze Horse Inn doesn't sound familiar. It's probably part of the new construction happening alongside the rebuilding efforts.")
            elif gears.personality.DeadZone in camp.pc.personality:
                pbge.alert(
                    "You arrive in Wujung, gateway to the Green Zone. The air here is clean and crisp; the grass is soft beneath your feet. Majestic buildings reach skyward like a picture of the PreZero age.")
                pbge.alert(
                    "From the stories you heard about the biomonster Typhon, you were expecting this city to be half in ruins. Time to find the Bronze Horse Inn.")
            elif gears.personality.GreenZone in camp.pc.personality:
                pbge.alert(
                    "You arrive in Wujung, the city known as the gateway to the Dead Zone. Once this place was considered unassailable; now, the damage caused by the biomonster Typhon provides a permanent reminder that no place on Earth is truly safe.")
                pbge.alert(
                    "The Bronze Horse Inn is a new addition to the city. Might as well take a look around and see if you can find it.")
            else:
                pbge.alert(
                    "You enter Wujung, the gateway to the Dead Zone. The harsh wasteland outside the wall quickly gives way to lush grass and busy streets. This section of the city is where traders and merchants operate.")
                pbge.alert(
                    "According to its thrupage, the Bronze Horse Inn is somewhere in this neighborhood. You can check out some of these other buildings while trying to find it.")
            self.intro_ready = False

    def _get_generic_offers(self, npc, camp):
        """Get any offers that could apply to non-element NPCs."""
        goffs = list()
        # This is an NPC in Wujung. Give them sone Info's to disclose.
        for inf in self.local_info:
            if inf.active:
                goffs.append(inf.build_offer())
        return goffs

    def _get_dialogue_grammar(self, npc, camp):
        mygram = collections.defaultdict(list)
        # This is an NPC in Wujung. Give them some news.
        mygram["[News]"] = ["Wujung is still repairing the damage Typhon caused", ]
        if camp.pc.has_badge("Typhon Slayer"):
            mygram["[TyphonDesc]"] = ["Why am I telling you this? You should know more about Typhon than I do!", ]
        else:
            mygram["[TyphonDesc]"] = [
                "It caused a lot of damage and killed a lot of people, but finally got taken down by a team of cavaliers.", ]

        qol: gears.QualityOfLife = self.elements["METRO"].get_quality_of_life()
        if qol.prosperity > 0:
            mygram["[CURRENT_EVENTS]"].append(
                "Rebuilding Wujung took a lot of money, but I'd say it's better than ever.")
        elif qol.prosperity < 0:
            mygram["[CURRENT_EVENTS]"].append("Good luck finding a mission; money is tight these days.")

        if qol.community > 0:
            mygram["[CURRENT_EVENTS]"].append(
                "The only up side of the Typhon incident is how it brought everyone in Wujung together.")
        elif qol.community < 0:
            mygram["[CURRENT_EVENTS]"].append("I don't trust anyone anymore, not since Typhon.")

        if qol.stability > 0:
            mygram["[CURRENT_EVENTS]"].append(
                "This is one of the most peaceful cities on Earth, if you don't mind the occasional giant monster attack.")
        elif qol.stability < 0:
            mygram["[CURRENT_EVENTS]"].append("Keep a close eye on your wallet; Wujung isn't as safe as it used to be.")

        if qol.health > 0:
            mygram["[CURRENT_EVENTS]"].append(
                "Did you know the hospital is the oldest building in town? It dates back to the Age of Superpowers.")
        elif qol.health < 0:
            mygram["[CURRENT_EVENTS]"].append("Our hospital is old and decrepit; when will we get a new one?")

        if qol.defense > 0:
            mygram["[CURRENT_EVENTS]"].append(
                "The Terran Defense Force is the mightiest mecha legion in the solar system.")
        elif qol.defense < 0:
            mygram["[CURRENT_EVENTS]"].append(
                "The Defense Force hasn't recovered from Typhon's rampage... what will happen if we're attacked again?")

        return mygram


class WujungGarrison(Plot):
    # Add representatives of the Terran Federation, TDF, Guardians, and Solar Navy
    LABEL = "DZDHB_WujungGarrison"
    active = True
    scope = "METRO"

    def custom_init(self, nart):
        self.npcs = list()
        sp1 = self.add_sub_plot(nart, "PLACE_LOCAL_REPRESENTATIVES",
                                elements={"FACTION": gears.factions.TerranFederation})
        self.elements["FEDERATION"] = sp1.elements["NPC"]
        self.npcs.append(sp1.elements["NPC"])

        sp2 = self.add_sub_plot(nart, "PLACE_LOCAL_REPRESENTATIVES",
                                elements={"FACTION": gears.factions.TerranDefenseForce})
        self.elements["DEFENSE"] = sp2.elements["NPC"]
        self.npcs.append(sp2.elements["NPC"])

        sp3 = self.add_sub_plot(nart, "PLACE_LOCAL_REPRESENTATIVES", elements={"FACTION": gears.factions.TheSolarNavy})
        self.elements["NAVY"] = sp3.elements["NPC"]
        self.npcs.append(sp3.elements["NPC"])

        sp4 = self.add_sub_plot(nart, "PLACE_LOCAL_REPRESENTATIVES", elements={"FACTION": gears.factions.Guardians})
        self.elements["GUARDIAN"] = sp4.elements["NPC"]
        self.npcs.append(sp4.elements["NPC"])

        sp5 = self.add_sub_plot(nart, "PLACE_LOCAL_REPRESENTATIVES",
                                elements={"FACTION": gears.factions.KettelIndustries})
        self.elements["KETTEL"] = sp5.elements["NPC"]
        self.npcs.append(sp5.elements["NPC"])

        return True

    def FEDERATION_offers(self, camp):
        # Can give a status report on Community
        mylist = list()

        qol: gears.QualityOfLife = self.elements["METRO"].get_quality_of_life()
        if qol.community > 0:
            mylist.append(Offer(
                "Things are going well, community-wise. The people of Wujung have pulled together to help one another in these difficult times. Whatever other challenges we face, we will face them together.",
                context=ContextTag([context.INFO, ]),
                no_repeats=True, data={"subject": "life in Wujung"}
            ))
        elif qol.community < 0:
            mylist.append(Offer(
                "Things have not been great. Ever since Typhon attacked, tensions have been high. There's been a sharp rise in xenophobia and paranoia. Critics of the government say this proves that democracies always decay into authoritarianism. I don't believe that, and I intend to prove them wrong.",
                context=ContextTag([context.INFO, ]),
                no_repeats=True, data={"subject": "life in Wujung"}
            ))
        else:
            mylist.append(Offer(
                "Things are about the same as they've always been. Wujung is an old fortress-city; we've been through a lot of bad times before and we always pull through.",
                context=ContextTag([context.INFO, ]),
                no_repeats=True, data={"subject": "life in Wujung"}
            ))

        mylist.append(Offer(
            "The Terran Federation is an alliance of various city-fortresses and states from all over the Earth. Ever since the Typhon incident last year we've been trying to get more states to join, since cooperation is the only way we will be able to resist Aegis Overlord.",
            context=ContextTag([context.INFO, ]), subject=gears.factions.TerranFederation.name,
            no_repeats=True, data={"subject": "the Terran Federation"}
        ))

        return mylist

    def DEFENSE_offers(self, camp):
        # Can give a status report on Health
        mylist = list()
        qol: gears.QualityOfLife = self.elements["METRO"].get_quality_of_life()
        if qol.health > 0:
            mylist.append(Offer(
                "For all our problems, Wujung remains one of the safest cities on Earth. As a member of the Defense Force I'm proud to help keep it that way.",
                context=ContextTag([context.INFO, ]),
                no_repeats=True, data={"subject": "threats to Wujung"}
            ))
        elif qol.health < 0:
            mylist.append(Offer(
                "I'm a {DEFENSE.job}; it's my duty to protect Wujung from military threats. Unfortunately, there are some dangers you can't fight with a giant robot. We've lost way too many good people lately.".format(
                    **self.elements),
                context=ContextTag([context.INFO, ]),
                no_repeats=True, data={"subject": "threats to Wujung"}
            ))
        else:
            mylist.append(Offer(
                "We've been lucky enough to not have any plagues or famines these days. As for military threats, the Defense Force makes sure that they stay on the other side of the wall.",
                context=ContextTag([context.INFO, ]),
                no_repeats=True, data={"subject": "threats to Wujung"}
            ))

        mylist.append(Offer(
            "We protect the Federation from terrestrial threats, such as Clan Ironwind and the Bone Devil Gang.",
            context=ContextTag([context.INFO, ]), subject=gears.factions.TerranDefenseForce.name,
            no_repeats=True, data={"subject": "the Defense Force"}
        ))

        mylist.append(Offer(
            "Ironwind Fortress is an imperialistic deadzone city south of here. They have conquered a small empire in southeast Eurasia and hope to expand their territory. It's widely believed that they're being funded by Aegis.",
            context=ContextTag([context.INFO, ]), subject="Ironwind",
            no_repeats=True, data={"subject": "Clan Ironwind"}
        ))

        mylist.append(Offer(
            "The Bone Devil Gang are a massive criminal conglomerate; they have their fingers in every dirty business you can name, from stimrunning to organlegging. They also do a whole lot of highway robbery.",
            context=ContextTag([context.INFO, ]), subject="Bone Devil Gang",
            no_repeats=True, data={"subject": "the Bone Devils"}
        ))

        return mylist

    def NAVY_offers(self, camp):
        # Can give a status report on Defense
        mylist = list()
        qol: gears.QualityOfLife = self.elements["METRO"].get_quality_of_life()
        if qol.defense > 0:
            mylist.append(Offer(
                "With the Defense Force backed up by additional Solar Navy patrols, this city is more secure than it's ever been. I only hope that when the next threat arises it will be enough.",
                context=ContextTag([context.INFO, ]),
                no_repeats=True, data={"subject": "Wujung's defenses"}
            ))
        elif qol.defense < 0:
            mylist.append(Offer(
                "Typhon's attack severely damaged our western defenses. The Blue Fortress garrison doesn't have the strength left to protect Wujung from all our enemies in the dead zone; that's why several Solar Navy lances have been called in from Namok.".format(
                    **self.elements),
                context=ContextTag([context.INFO, ]),
                no_repeats=True, data={"subject": "Wujung's defenses"}
            ))
        else:
            mylist.append(Offer(
                "Wujung is secure, for now. The Solar Navy detachment that was called in after Typhons's attack can continue our original mission of patroling the dead zone for Aegis and Crihna incursions.",
                context=ContextTag([context.INFO, ]),
                no_repeats=True, data={"subject": "Wujung's defenses"}
            ))

        mylist.append(Offer(
            "The Solar Navy has two jobs. First, we protect Earth against threats from space, such as Aegis Overlord and the Blades of Crihna. Second, we patrol the trade routes between Earth and the rest of the solar system.",
            context=ContextTag([context.INFO, ]), subject=gears.factions.TheSolarNavy.name,
            no_repeats=True, data={"subject": "the Solar Navy"}
        ))

        mylist.append(Offer(
            "The Blades of Crihna are a space pirate fleet originating from the L5 region. Until recently they didn't really have any operations on Earth, but now they're attempting to establish a presence in the dead zone. Their main business is smuggling.",
            context=ContextTag([context.INFO, ]), subject="of Crihna",
            no_repeats=True, data={"subject": "the Blades"}
        ))

        return mylist

    def GUARDIAN_offers(self, camp):
        # Can give a status report on Stability
        mylist = list()
        qol: gears.QualityOfLife = self.elements["METRO"].get_quality_of_life()
        if qol.stability > 0:
            mylist.append(Offer(
                "Crime is at an all-time low, which is good because it means I get to hang around here all day instead of going out there and getting shot at.",
                context=ContextTag([context.INFO, ]),
                no_repeats=True, data={"subject": "crime in Wujung"}
            ))
        elif qol.stability < 0:
            mylist.append(Offer(
                "In all my time on the force, I've never seen this degree of lawlessness. Violent crime is on the rise all over the city. Because of the reconstruction work, we don't have the budget or manpower to launch proper interventions.",
                context=ContextTag([context.INFO, ]),
                no_repeats=True, data={"subject": "crime in Wujung"}
            ))
        else:
            mylist.append(Offer(
                "Things are about the same as they've ever been. Wujung was one of the early adopters of community intervention programs, so our baseline for criminal activity has been pretty low anyway.",
                context=ContextTag([context.INFO, ]),
                no_repeats=True, data={"subject": "crime in Wujung"}
            ))

        mylist.append(Offer(
            "The Guardians are the lawkeeping arm of the Terran Federation. Our mandate is to prevent, investigate, and prosecute crime wherever it occurs.",
            context=ContextTag([context.INFO, ]), subject=gears.factions.Guardians.name,
            no_repeats=True, data={"subject": "the Guardians"}
        ))

        return mylist

    def KETTEL_offers(self, camp):
        # Can give a status report on Prosperity
        mylist = list()
        qol: gears.QualityOfLife = self.elements["METRO"].get_quality_of_life()
        if qol.prosperity > 0:
            mylist.append(Offer(
                "This is a great time to be doing business in Wujung. Kettel Industries has just acquired a large parcel of land for our neotech division. Things can onlu possibly get better from here on out.",
                context=ContextTag([context.INFO, ]),
                no_repeats=True, data={"subject": "business in Wujung"}
            ))
        elif qol.prosperity < 0:
            mylist.append(Offer(
                "I won't say that this is the worst the economy has ever been... the days after the Night of Fire must have been pretty bad too.",
                context=ContextTag([context.INFO, ]),
                no_repeats=True, data={"subject": "business in Wujung"}
            ))
        else:
            mylist.append(Offer(
                "The Typhon attack has been a boon to constrcution firms and weapon manufacturers. It's been a bad thing for tourism and consumer electronics. Plan your investments accordingly.",
                context=ContextTag([context.INFO, ]),
                no_repeats=True, data={"subject": "business in Wujung"}
            ))

        mylist.append(Offer(
            "Kettel Industries is the megacorporation that empowers Earth to face the challenges of the second century NT. Our research department delves into both the lost technologies of the Age of Superpowers and new technologies never before imagined. Through the guidance of CEO Elisha Kettel, we aim to usher in a second golden age for mankind.",
            context=ContextTag([context.INFO, ]), subject=gears.factions.KettelIndustries.name,
            no_repeats=True, data={"subject": "Kettel Industries"}
        ))

        return mylist

    def _get_dialogue_grammar(self, npc, camp):
        mygram = dict()
        if npc in self.npcs:
            mygram["[CURRENT_EVENTS]"] = [
                "I work for {}.".format(npc.faction.name),
            ]

        return mygram


class TestCharMover(Plot):
    LABEL = "TEST_CHAR_MOVER"
    active = True
    scope = "METRO"

    def custom_init(self, nart):
        building = self.register_element("_EXTERIOR", game.content.ghterrain.ScrapIronBuilding(
            waypoints={"DOOR": ghwaypoints.GlassDoor(name="Test Char Mover")},
            door_sign=(game.content.ghterrain.FixitShopSignEast, game.content.ghterrain.FixitShopSignSouth),
            tags=[pbge.randmaps.CITY_GRID_ROAD_OVERLAP]), dident="LOCALE")

        # Add the interior scene.
        team1 = teams.Team(name="Player Team")
        team2 = teams.Team(name="Civilian Team")
        intscene = gears.GearHeadScene(35, 35, "Char Mover Test", player_team=team1, civilian_team=team2,
                                       attributes=(gears.tags.SCENE_BUILDING, gears.tags.SCENE_SHOP),
                                       scale=gears.scale.HumanScale)

        intscenegen = pbge.randmaps.SceneGenerator(intscene, game.content.gharchitecture.IndustrialBuilding())
        self.register_scene(nart, intscene, intscenegen, ident="INTERIOR", dident="LOCALE")
        foyer = self.register_element('_introom', pbge.randmaps.rooms.ClosedRoom(anchor=pbge.randmaps.anchors.south,
                                                                                 decorate=game.content.gharchitecture.CheeseShopDecor()),
                                      dident="INTERIOR")

        mycon2 = game.content.plotutility.TownBuildingConnection(nart, self, self.elements["LOCALE"], intscene,
                                                                 room1=building,
                                                                 room2=foyer, door1=building.waypoints["DOOR"],
                                                                 move_door1=False)

        npc = self.register_element("NPC",
                                    gears.selector.random_character(50, local_tags=self.elements["LOCALE"].attributes,
                                                                    job=gears.jobs.ALL_JOBS["Shopkeeper"]))
        npc.place(intscene, team=team2)

        mycircle = self.register_element("ENEMY_FACTION", plotutility.RandomBanditCircle(nart.camp))
        npc2 = self.register_element("NPC2",
                                     gears.selector.random_character(10, local_tags=self.elements["LOCALE"].attributes,
                                                                     faction=mycircle,
                                                                     job=gears.jobs.ALL_JOBS["Mecha Pilot"]))
        npc2.place(intscene, team=team2)

        self.mission_seed = None
        return True

    def MISSION_GATE_menu(self, camp, thingmenu):
        if self.mission_seed:
            thingmenu.add_item(self.mission_seed.name, self.mission_seed)

    def t_UPDATE(self, camp):
        # If the adventure has ended, get rid of it.
        if self.mission_seed and self.mission_seed.ended:
            self.mission_seed = None

    def NPC_offers(self, camp):
        mylist = list()
        if not self.mission_seed:
            mylist.append(Offer(
                "Go test this!".format(**self.elements),
                context=ContextTag([context.MISSION, ]), subject=self, subject_start=True,
                effect=self.register_adventure
            ))
        return mylist

    def NPC2_offers(self, camp):
        mylist = list()
        if not self.mission_seed:
            mylist.append(Offer(
                "[HELLO] {NPC2.faction} vs {ENEMY_FACTION} {NPC2.combatant}".format(**self.elements),
                context=ContextTag([context.HELLO, ]),
            ))
        return mylist

    def register_adventure(self, camp):
        self.mission_seed = missionbuilder.BuildAMissionSeed(
            camp, "{}'s Mission".format(self.elements["NPC"]),
            self.elements["METROSCENE"], self.elements["MISSION_GATE"],
            self.elements.get("ENEMY_FACTION"), rank=self.rank, architecture=gharchitecture.MechaScaleGreenzone(),
            objectives=(missionbuilder.BAMO_DEFEAT_COMMANDER,),
        )
        missionbuilder.NewMissionNotification(self.mission_seed.name, self.elements["MISSION_GATE"])


class DZD_BronzeHorseInn(Plot):
    LABEL = "DZDHB_BronzeHorseInn"

    active = True
    scope = True

    def custom_init(self, nart):
        # Create a building within the town.
        building = self.register_element("_EXTERIOR", game.content.ghterrain.ResidentialBuilding(
            waypoints={"DOOR": ghwaypoints.ScreenDoor(name="Bronze Horse Inn")},
            tags=[pbge.randmaps.CITY_GRID_ROAD_OVERLAP]), dident="LOCALE")

        # Add the interior scene.
        team1 = teams.Team(name="Player Team")
        team2 = self.register_element("FOYER_TEAM", teams.Team(name="Civilian Team"))
        intscene = gears.GearHeadScene(50, 35, "Bronze Horse Inn", player_team=team1, civilian_team=team2,
                                       attributes=(
                                       gears.tags.SCENE_PUBLIC, gears.tags.SCENE_BUILDING, gears.tags.SCENE_MEETING),
                                       scale=gears.scale.HumanScale)

        intscenegen = pbge.randmaps.PackedBuildingGenerator(intscene, game.content.gharchitecture.ResidentialBuilding())
        self.register_scene(nart, intscene, intscenegen, ident="INTERIOR", dident="LOCALE")
        foyer = self.register_element('_introom', pbge.randmaps.rooms.ClosedRoom(width=10, height=10,
                                                                                 anchor=pbge.randmaps.anchors.south,
                                                                                 decorate=game.content.gharchitecture.ResidentialDecor()),
                                      dident="INTERIOR")
        foyer.contents.append(team2)

        mycon2 = game.content.plotutility.TownBuildingConnection(nart, self, self.elements["LOCALE"], intscene,
                                                                 room1=building,
                                                                 room2=foyer, door1=building.waypoints["DOOR"],
                                                                 move_door1=False)

        museum = self.register_element('_museum', pbge.randmaps.rooms.ClosedRoom(width=10, height=10),
                                       dident="INTERIOR")
        museum.contents.append(ghwaypoints.BuruBuruModel(
            desc="The BuruBuru is arguably the most popular mecha in the world. It is cheap, durable, and versatile. This may not be the most glamorous mecha you'll ever pilot, but at least it's better than having to ride an Ice Wind."))
        museum.contents.append(ghwaypoints.KojedoModel(
            desc="The Kojedo is a new mecha designed by Biocorp for the Terran Defense Force. It's not exactly a replacement for the Corsair, more of a companion. This mecha packs some heavy firepower and an electronic warfare system."))
        museum.contents.append(ghwaypoints.GladiusModel(
            desc="Since NT152, the Gladius mecha has been awarded to the winner of Snake Lake City's annual Robot Warriors competition. This makes it one of the rarest mecha in the world since only five of them have been constructed so far. The Gladius is based on a Savin frame, but has been heavily modified by the Ran Magnus workshop."))
        museum.contents.append(ghwaypoints.GoldPlaque(
            desc="This plaque confirms that the BRONZE HORSE INN has been designated an official CAVALIER CLUB by the PRO DUELIST ASSOCIATION."))
        museum.contents.append(ghwaypoints.VadelModel(
            desc="For sixty years the Vadel has been Earth's foremost high end sports battroid. Designed and built right here in Wujung, this mecha combines unsurpassed speed with a versatile array of powerful weapons."))
        museum.contents.append(ghwaypoints.HarpyModel(
            desc="The Harpy transatmospheric fighter is a hybrid aerobatroid used by the Solar Navy. This is one nasty piece of work. Its heavy missiles can take down an entire lance at once, then it swoops in and picks off the survivors with twin laser cannons. Avoid avoid avoid. Unless you're the one piloting it, in which case enjoy."))
        museum.contents.append(ghwaypoints.ClaymoreModel(
            desc="The Claymore holds the distinction of being the oldest mecha design still in production. It may be heavy and slow, but it is also well armored and usually loaded with enough firepower to raze a small city."))
        self.team3 = self.register_element("MUSEUM_TEAM", teams.Team(name="Museum Team"))
        museum.contents.append(self.team3)

        # Add the elevator to the guest rooms- this can be used by subplots to also visit lancemate rooms and other stuff.

        osmund = gears.base.Character(name="Osmund", statline={gears.stats.Reflexes: 17,
                                                               gears.stats.Body: 16, gears.stats.Speed: 14,
                                                               gears.stats.Perception: 13,
                                                               gears.stats.Knowledge: 13, gears.stats.Craft: 7,
                                                               gears.stats.Ego: 9,
                                                               gears.stats.Charm: 15, gears.stats.MechaPiloting: 7,
                                                               gears.stats.MechaGunnery: 7,
                                                               gears.stats.MechaFighting: 7,
                                                               gears.stats.Negotiation: 8}, birth_year=102,
                                      portrait='card_m_osmund.png',
                                      personality=[personality.Sociable, personality.Passionate, personality.Fellowship,
                                                   personality.DeadZone],
                                      colors=(gears.color.Straw, gears.color.TannedSkin, gears.color.PlasmaBlue,
                                              gears.color.Gold, gears.color.AceScarlet),
                                      gender=gears.genderobj.Gender.get_default_male(),
                                      job=gears.jobs.ALL_JOBS["Innkeeper"], renown=65, combatant=True)

        team2.contents.append(osmund)
        self.register_element("INNKEEPER", osmund)
        self.did_intro = False
        self.told_about_services = False
        self.gave_mission = False
        self.opened_gym = False
        self.training = services.SkillTrainer((gears.stats.Vitality, gears.stats.Concentration, gears.stats.Athletics,
                                               gears.stats.Dodge, gears.stats.CloseCombat, gears.stats.RangedCombat))

        self.mission_seed = missionbuilder.BuildAMissionSeed(
            nart.camp, "Help Osmund's Friend", self.elements["METROSCENE"], self.elements["MISSION_GATE"],
            objectives=(missionbuilder.BAMO_CAPTURE_THE_MINE, missionbuilder.BAMO_NEUTRALIZE_ALL_DRONES),
            cash_reward=500,
            architecture=gharchitecture.MechaScaleSemiDeadzone(),
            enemy_faction=plotutility.RandomBanditCircle(nart.camp),
            win_message="You have liberated the mining camp from the bandits who stole it.",
            one_chance=False, on_win=self._win_mine_mission
        )

        self.osmund_info = (
            OneShotInfoBlast("cavaliers",
                             "Freelance mecha pilots. Some people prefer the term mercenaries, or adventurers. Cavalier is what I used to call myself back when I was doing that sort of work."),
            OneShotInfoBlast("the Bronze Horse",
                             "In PreZero times, around this area, a bronze medallion with a horse on it was the symbol of a special agent. These agents were heroes of the common people; they'd go around fixing problems and punishing the slagheads who abused their power. Kind of like cavaliers do today."),
            OneShotInfoBlast("lancemates",
                             "You won't get very far around here if you try running off by yourself; you'll get even less far if you head out into the dead zone. Try talking to some of the pilots here and see if you can get them to join you. Come back and see me when you get three lancemates and I may have some work for you."),
            OneShotInfoBlast("the dead zone",
                             "Well, the dead zone is kind of a funny name, because really it's a whole lot of different places. All that area to the west of here, where life hasn't really recovered since the Night of Fire. Of course that doesn't mean there's nobody there. I'm from the dead zone myself, originally."),
            OneShotInfoBlast("the Night of Fire",
                             "You didn't pay much attention in school, did you? The nuclear war that ended the Age of Superpowers and created the world as we knows it now. They say that two thirds of everybody alive was dead in a week."),
        )

        # Create the athlete.
        self.register_element("TRAINER",
                              gears.selector.random_character(35, camp=nart.camp, job=gears.jobs.ALL_JOBS["Athlete"]))

        self.add_sub_plot(nart, "DZD_BHIRandomLancemate")
        self.add_sub_plot(nart, "DZD_BHIRandomLancemate")
        # self.add_sub_plot(nart, "DZD_BHIRandomLancemate")

        return True

    def _do_intro(self, camp):
        self.did_intro = True

    def _tell_about_services(self, camp):
        self.told_about_services = True

    def INNKEEPER_offers(self, camp: gears.GearHeadCampaign):
        mylist = list()

        if self.did_intro:
            mylist.append(Offer("[HELLO] [_BRONZE_HORSE_SPIEL]",
                                context=ContextTag([context.HELLO]),
                                ))
        else:
            mylist.append(Offer(
                "[HELLO] I am the owner of the Bronze Horse Inn; our facilities were designed especially for cavaliers. If you need a place to stay or just want to pick up some lancemates you've come to the right place.",
                context=ContextTag([context.HELLO]), effect=self._do_intro
            ))
        if not self.told_about_services:
            mylist.append(Offer(
                "While you rest in one of our suites, your mecha will be taken care of in our offsite hangar with full repair and customization services. We have a physical training room, a mecha museum, and a twenty four hour breakfast buffet. It's everything a cavalier could want.",
                context=ContextTag([context.INFO]), effect=self._tell_about_services,
                data={"subject": "your services"}, no_repeats=True,
                ))
        if self.did_intro and not self.gave_mission and len(camp.get_lancemates()) >= 3:
            mylist.append(
                Offer("[HELLO] You know, A friend of mine has a problem that you might be able to help with...",
                      context=ContextTag([context.HELLO]),
                      ))
            mylist.append(
                Offer(
                    "A buddy of mine from back home set up a robotic mining operation just outside of Last Hope. Unfortunately, as soon as she started hitting the good stuff, a gang of bandits rolled in and took over the site for themselves. What I'd like you to do is go clear 'em out.",
                    context=ContextTag([context.MISSION]), subject=self, subject_start=True
                    ))
            mylist.append(
                Offer(
                    "Fantastic. You can access the mission by heading to the West Gate of Wujung and following the nav coordinates I'm sending to you now. [GOODLUCK]",
                    context=ContextTag([context.ACCEPT]), subject=self, effect=self._accept_mission
                ))
            mylist.append(
                Offer(
                    "[UNDERSTOOD] You're going to want to keep your eyes open for mission offers, though, since they're the main way for cavaliers to earn money.",
                    context=ContextTag([context.DENY]), subject=self, effect=self._deny_mission
                ))
        for inf in self.osmund_info:
            if inf.active:
                mylist.append(inf.build_offer())

        if camp.campdata.get("CD_SPOKE_TO_RAN", None) and not self.opened_gym:
            # if not self.opened_gym:
            mylist.append(
                Offer(
                    "Oh yeah, Ran and I go way back. We were lancemates back in the twenties. She's a good person to know if you're a cavalier.\n I'll tell you another good person to know- the hotel's personal trainer {TRAINER}. You can probably find {TRAINER.gender.object_pronoun} in the museum.".format(
                        **self.elements),
                    context=ContextTag([context.CUSTOM]),
                    data={"reply": "You didn't tell us that the mission you gave was for Ran Magnus!"},
                    effect=self._open_gym
                ))

        # ghdialogue.TagBasedPartyReply(
        #    Offer(
        #        "Ran and I used to be in the same lance. Of course that was years before she set up her mecha factory, and I eventually set up this hotel...",
        #        context=ContextTag([context.INFO]),data={"subject": "Ran Magnus"}, no_repeats=True,
        #    ), camp, mylist, [gears.tags.Academic]
        # )

        return mylist

    def _open_gym(self, camp):
        self.opened_gym = True
        my_scene: gears.GearHeadScene = self.elements["INTERIOR"]
        my_scene.deploy_team([self.elements["TRAINER"]], self.team3)

    def _accept_mission(self, camp):
        missionbuilder.NewMissionNotification(self.mission_seed.name, self.elements["MISSION_GATE"])
        self.gave_mission = True

    def _deny_mission(self, camp):
        self.gave_mission = True
        self.mission_seed = None

    def MISSION_GATE_menu(self, camp, thingmenu):
        if self.mission_seed and self.gave_mission:
            thingmenu.add_item(self.mission_seed.name, self.mission_seed)

    def _win_mine_mission(self, camp: gears.GearHeadCampaign):
        camp.campdata["MINE_MISSION_WON"] = True

    def t_UPDATE(self, camp):
        # If the adventure has ended, get rid of it.
        if self.mission_seed and self.mission_seed.ended:
            self.mission_seed = None

    def _get_dialogue_grammar(self, npc, camp):
        mygram = dict()
        if camp.scene.get_root_scene() is self.elements["LOCALE"]:
            # This is an NPC in Wujung. Give them some news.
            mygram["[_BRONZE_HORSE_SPIEL]"] = [
                "Let me know if you need any help.", "Have you met the other cavaliers staying here?",
                "I hope you enjoy your stay at the Bronze Horse Inn.",
                "This is the best place in town to find lancemates."
            ]

        return mygram

    def TRAINER_offers(self, camp: gears.GearHeadCampaign):
        mylist = list()
        mylist.append(Offer(
            "Let's get started. No pain, no gain.",
            context=ContextTag((context.OPEN_SCHOOL,)), effect=self.training,
        ))
        return mylist


#   ********************************
#   ***  DZD_BHIRandomLancemate  ***
#   ********************************
#
# A random lancemate for the Bronze Horse Inn in Wujung.

class DZD_BHIRandomLancemate(Plot):
    LABEL = "DZD_BHIRandomLancemate"
    UNIQUE = True

    def custom_init(self, nart):
        npc = gears.selector.random_character(rank=random.randint(10, 50),
                                              mecha_colors=gears.color.random_mecha_colors(),
                                              local_tags=tuple(self.elements["LOCALE"].attributes),
                                              combatant=True)
        self.register_element("NPC", npc, dident=random.choice(("MUSEUM_TEAM", "FOYER_TEAM")))
        self.add_sub_plot(nart, "RLM_Relationship", elements={"NPC_SCENE": self.elements["INTERIOR"]})
        return True


class DZD_BHIAdventurer(Plot):
    LABEL = "DZD_BHIRandomLancemate"
    UNIQUE = True
    JOBS = ("Soldier", "Mecha Pilot", "Scavenger", "Arena Pilot", "Martial Artist", "Test Pilot", "Mercenary")

    def custom_init(self, nart):
        npc = gears.selector.random_character(job=gears.jobs.ALL_JOBS[random.choice(self.JOBS)],
                                              rank=random.randint(10, 50),
                                              mecha_colors=gears.color.random_mecha_colors(),
                                              local_tags=tuple(self.elements["LOCALE"].attributes),
                                              combatant=True)
        self.register_element("NPC", npc, dident="FOYER_TEAM")
        self.add_sub_plot(nart, "RLM_Relationship", elements={"NPC_SCENE": self.elements["INTERIOR"]})
        return True


class DZD_BHIScout(Plot):
    LABEL = "DZD_BHIRandomLancemate"
    UNIQUE = True
    JOBS = ("Bounty Hunter", "Recon Pilot", "Thief", "Explorer")

    def custom_init(self, nart):
        npc = gears.selector.random_character(job=gears.jobs.ALL_JOBS[random.choice(self.JOBS)],
                                              rank=random.randint(10, 50),
                                              mecha_colors=gears.color.random_mecha_colors(),
                                              local_tags=tuple(self.elements["LOCALE"].attributes),
                                              combatant=True)
        self.register_element("NPC", npc, dident=random.choice(("MUSEUM_TEAM", "FOYER_TEAM")))
        self.add_sub_plot(nart, "RLM_Relationship", elements={"NPC_SCENE": self.elements["INTERIOR"]})
        return True


class DZD_BlueFortressHQ(Plot):
    LABEL = "DZDHB_BlueFortress"

    active = True
    scope = "METRO"

    # Compatibility var- for v0.540
    got_tutorial = False

    def custom_init(self, nart):
        # Create a building within the town.
        dd = {
            "image_bottom": 'terrain_building_brick_b.png', "image_top": 'terrain_building_brick_u.png',
            "blocks": (
            pbge.scenes.movement.Walking, gears.geffects.Skimming, gears.geffects.Rolling, pbge.scenes.movement.Flying),
            "colors": (
            gears.color.SteelBlue, gears.color.DeepSeaBlue, gears.color.Straw, gears.color.Black, gears.color.Black)
        }
        building = self.register_element("_EXTERIOR", game.content.ghterrain.BrickBuilding(
            waypoints={"DOOR": ghwaypoints.ScrapIronDoor(name="Blue Fortress")},
            tags=[pbge.randmaps.CITY_GRID_ROAD_OVERLAP], duck_dict=dd), dident="LOCALE", )

        # Add the interior scene.
        team1 = teams.Team(name="Player Team")
        team2 = teams.Team(name="Civilian Team")
        intscene = gears.GearHeadScene(35, 35, "Blue Fortress", player_team=team1, civilian_team=team2,
                                       attributes=(
                                       gears.tags.SCENE_PUBLIC, gears.tags.SCENE_BUILDING, gears.tags.SCENE_BASE),
                                       scale=gears.scale.HumanScale, faction=factions.TerranDefenseForce)

        intscenegen = pbge.randmaps.PackedBuildingGenerator(intscene, game.content.gharchitecture.DefaultBuilding())
        self.register_scene(nart, intscene, intscenegen, ident="INTERIOR", dident="LOCALE")
        foyer = self.register_element('_introom', pbge.randmaps.rooms.ClosedRoom(anchor=pbge.randmaps.anchors.south),
                                      dident="INTERIOR")

        foyer.contents.append(ghwaypoints.StatueM(
            desc="""General Jae "Ripper Turtle" Cauchi is generally considered the first Post-Zero ruler of Wujung, and by extension the founder of the Terran Defense Force. His army united all of the local settlements under a single banner by NT37.\n His epithet is thought to derive from his habit of executing rivals by casting them into a pit of mutant carnivorous tortoises."""))
        foyer.contents.append(ghwaypoints.StatueF(
            desc="""General Anna "The Pure" Greencrown was originally one of General Cauchi's lieutenants. She was instrumental in quashing the Ipshil Pirate Insurrection. Greencrown succeeded Cauchi as leader of Wujung following his mysterious death from blood loss in NT41.\n Following the Data Miner's Rebellion in NT59, Greencrown voluntarily retired from politics, ushering in a new age of peace and democracy."""))
        foyer.contents.append(ghwaypoints.GoldPlaque(desc="""The Terran Defense Force\n Blue Fortress"""))

        mycon2 = game.content.plotutility.TownBuildingConnection(nart, self, self.elements["LOCALE"], intscene,
                                                                 room1=building,
                                                                 room2=foyer, door1=building.waypoints["DOOR"],
                                                                 move_door1=False)

        npc = self.register_element("DISPATCHER",
                                    gears.selector.random_character(random.randint(26, 70),
                                                                    local_tags=self.elements["LOCALE"].attributes,
                                                                    faction=factions.TerranDefenseForce,
                                                                    job=gears.jobs.ALL_JOBS["Commander"]), lock=True)
        npc.place(intscene, team=team2)

        self.adventure_seed = None
        self.next_enemy_faction = self.generate_enemy_faction()
        self.next_mission_date = 0
        self.total_mission_wins = 0
        self.not_yet_told_no_missions_left = True
        # self.register_adventure(nart.camp)

        room2 = self.register_element('_room2', pbge.randmaps.rooms.ClosedRoom(), dident="INTERIOR")
        team3 = teams.Team(name="Lounge Team")
        room2.contents.append(ghwaypoints.EarthMap())
        for t in range(random.randint(3, 7)):
            room2.contents.append(ghwaypoints.Lockers())

        vikki = nart.camp.get_major_npc(gears.oldghloader.GH1Loader.NPC_VIKKI)
        vikki.portrait = 'card_f_vikki_dzd.png'
        self.register_element("VIKKI", vikki)
        vikki.place(intscene, team=team3)
        self.got_tutorial = False

        self.test_trainer = services.SkillTrainer()

        return True

    def MISSION_GATE_menu(self, camp, thingmenu):
        if self.adventure_seed:
            thingmenu.add_item(self.adventure_seed.name, self.adventure_seed)

    ENEMY_FACTIONS = (factions.AegisOverlord, factions.AegisOverlord, factions.ClanIronwind, factions.ClanIronwind,
                      factions.BoneDevils, factions.BoneDevils, factions.BoneDevils, factions.BladesOfCrihna)

    def generate_enemy_faction(self):
        # Randomly determine an enemy faction.
        return random.choice(self.ENEMY_FACTIONS)

    def register_adventure(self, camp):
        self.adventure_seed = CombatMissionSeed(camp, "{}'s Mission".format(self.elements["DISPATCHER"]),
                                                self.elements["LOCALE"], self.elements["MISSION_GATE"],
                                                enemy_faction=self.next_enemy_faction,
                                                allied_faction=factions.TerranDefenseForce,
                                                architecture = gharchitecture.MechaScaleGreenzone(),
                                                on_win=self._win_mission)
        missionbuilder.NewMissionNotification(self.adventure_seed.name, self.elements["MISSION_GATE"])

    def _win_mission(self, camp: gears.GearHeadCampaign):
        self.total_mission_wins += 1

    def _tell_no_missions(self, camp):
        self.not_yet_told_no_missions_left = False

    def deny_adventure(self, camp: gears.GearHeadCampaign):
        self.adventure_seed = None
        self.next_mission_date = camp.day + 1
        self.next_enemy_faction = self.generate_enemy_faction()

    def t_UPDATE(self, camp):
        # If the adventure has ended, get rid of it.
        if self.adventure_seed and self.adventure_seed.ended:
            self.adventure_seed = None
            self.next_enemy_faction = self.generate_enemy_faction()

    def DISPATCHER_offers(self, camp: gears.GearHeadCampaign):
        mylist = list()

        if self.total_mission_wins >= 20:
            if self.not_yet_told_no_missions_left and not self.adventure_seed:
                mylist.append(
                    Offer(
                        "Sorry, but you've done such a good job defending Wujung, there aren't any missions left for you to do.",
                        context=ContextTag([context.MISSION, ]), effect=self._tell_no_missions,
                    )
                )

        elif camp.day >= self.next_mission_date and not self.adventure_seed:
            mylist.append(
                Offer(
                    "The Defense Force is short handed at the moment, so there are almost always missions available. [MechaMissionVsEnemyFaction].",
                    context=ContextTag([context.MISSION, ]), subject=self, subject_start=True,
                    data={"enemy_faction": self.next_enemy_faction.name}
                )
            )

            mylist.append(
                Offer(
                    "[IWillSendMissionDetails]. You can start the mission by heading to the West Gate.",
                    context=ContextTag([context.ACCEPT, ]), subject=self, effect=self.register_adventure,
                    data={"enemy_faction": self.next_enemy_faction.name}
                )
            )

            mylist.append(
                Offer(
                    "[UNDERSTOOD] You can come back tomorrow for a different mission.",
                    context=ContextTag([context.DENY, ]), subject=self, effect=self.deny_adventure,
                    data={"enemy_faction": self.next_enemy_faction.name}
                )
            )

        return mylist

    def VIKKI_offers(self, camp):
        mylist = list()

        if not self.got_tutorial:
            mylist.append(Offer(
                "Someone sent you to get the spiel, did they? Alrightie then, your mecha has two values which describe its combat performance: Armor and Mobility. Each of your weapons also has two performance values: Penetration and Accuracy. The thing you need to know is that penetration counteracts armor, whilc accuracy counteracts mobility.",
                context=ContextTag([context.INFO, ]), effect=self.get_tutorial,
                data={"subject": "mecha combat"}, subject=self, subject_start=True, no_repeats=True,
            ))
        else:
            mylist.append(Offer(
                "Alright, let's review what I told you the first time. Accuracy counteracts mobility, penetration counteracts armor. You need mental power to activate skills and special attacks. You need stamina to defend against enemy attacks. The Thorshammer is the best mecha unless you can afford an Ovaknight. Any questions?",
                context=ContextTag([context.CUSTOM, ]),
                data={"reply": "Could you tell me about mecha combat again?"}, no_repeats=True,
            ))

        mylist.append(Offer(
            "I guess that's not a bad summary... sounds like something they'd teach you at kiddie mecha camp. But this here is big mecha pants class. The main thing to remember is that you use high accuracy weapons against high mobility targets, and high penetration weapons against heavily armored ones. Do the opposite and you're just wasting ammo.",
            context=ContextTag([context.CUSTOM, ]),
            data={
                "reply": "So accuracy makes a weapon more likely to hit, and penetration makes it more likely to cause damage. Got it."},
            subject=self,
        ))

        mylist.append(Offer(
            "A mecha is only as good as its pilot. I've seen lots of beginners think that as soon as they get a fancy ride they'll be aces right away, but it doesn't work like that. In addition to your piloting skills it's also important to keep your mind and body in top shape.",
            context=ContextTag([context.CUSTOMREPLY, ]),
            data={"reply": "Anything else that I should know?"}, subject=self,
        ))

        mylist.append(Offer(
            "You need both mental power and stamina to pilot a mecha. Mental power is used to activate abilities and special attacks. Stamina is used when you defend yourself against enemy attacks. Run out of either and you'll have a bad time. Training your concentration and athletics skills can help.",
            context=ContextTag([context.INFO, ]),
            data={"subject": "mind and body"}, subject="keep your mind and body", no_repeats=True,
        ))

        mylist.append(Offer(
            "No worries. I love any chance I can get to play the teacher. With any luck most of the stuff I told you will even turn out to be right.",
            context=ContextTag([context.CUSTOM, ]), dead_end=True,
            data={"reply": "Thanks for the tips."}, subject="keep your mind and body",
        ))

        # mylist.append(Offer(
        #    "This is a test of the skill training system.",
        #    context=ContextTag([context.OPEN_SCHOOL,]), effect=self.test_trainer
        # ))

        return mylist

    def get_tutorial(self, camp: gears.GearHeadCampaign):
        if not self.got_tutorial:
            self.got_tutorial = True
            for sk in (gears.stats.MechaGunnery, gears.stats.MechaFighting, gears.stats.MechaPiloting):
                camp.dole_xp(150, sk)

    def _get_dialogue_grammar(self, npc, camp):
        mygram = dict()
        mynpc = self.elements["VIKKI"]
        if npc is not mynpc and not self.got_tutorial:
            mygram["[News]"] = [
                "{VIKKI} at {VIKKI.scene} can give you some mecha piloting tips".format(**self.elements),
            ]

        return mygram


class DZD_AlliedArmor(Plot):
    LABEL = "DZDHB_AlliedArmor"

    active = True
    scope = "METRO"

    def custom_init(self, nart):
        # Sharing a building with Elite Equipment.
        building = self.elements["EXTERIOR"]

        # Add the interior scene.
        team1 = teams.Team(name="Player Team")
        team2 = teams.Team(name="Civilian Team", allies=(team1,))
        intscene = gears.GearHeadScene(50, 40, "Allied Armor", player_team=team1, civilian_team=team2,
                                       attributes=(
                                           gears.tags.SCENE_PUBLIC, gears.tags.SCENE_BUILDING, gears.tags.SCENE_SHOP,
                                           gears.tags.SCENE_GARAGE),
                                       scale=gears.scale.HumanScale)

        intscenegen = pbge.randmaps.PackedBuildingGenerator(intscene, game.content.gharchitecture.CommercialBuilding())
        self.register_scene(nart, intscene, intscenegen, ident="INTERIOR", dident="METROSCENE")
        foyer = self.register_element('_introom', pbge.randmaps.rooms.ClosedRoom(anchor=pbge.randmaps.anchors.south),
                                      dident="INTERIOR")
        foyer.contents.append(ghwaypoints.AlliedArmorSignWP())
        foyer.contents.append(team2)

        mycon2 = game.content.plotutility.TownBuildingConnection(nart, self, self.elements["LOCALE"], intscene,
                                                                 room1=building,
                                                                 room2=foyer, door1=building.waypoints["OTHER"],
                                                                 move_door1=False)

        npc = self.register_element("SHOPKEEPER",
                                    gears.selector.random_character(50, local_tags=self.elements["LOCALE"].attributes,
                                                                    job=gears.jobs.ALL_JOBS["Shopkeeper"]))
        team2.contents.append(npc)

        self.shop = services.Shop(npc=npc, rank=50)

        custom_shop = pbge.randmaps.rooms.ClosedRoom(parent=intscene)
        npc2 = self.register_element("MECHANIC",
                                     gears.selector.random_character(50, local_tags=self.elements["LOCALE"].attributes,
                                                                     job=gears.jobs.ALL_JOBS["Mechanic"]))
        team3 = teams.Team(name="Custom Shop Team", allies=(team1, team2))
        team3.contents.append(npc2)
        custom_shop.contents.append(team3)
        custom_shop.contents.append(ghwaypoints.MechEngTerminal())
        self.custom_shop = services.Shop(npc=npc2, ware_types=services.MECHA_PARTS_STORE, rank=75)

        self.asked_about_terminal = False

        secretstairs = self.register_element("STAIRSDOWN", ghwaypoints.Bookshelf(name="Bookshelf", plot_locked=True))
        foyer.contents.append(secretstairs)

        otherscene = gears.GearHeadScene(50, 40, "Secret Scene", player_team=team1,
                                         scale=gears.scale.HumanScale)

        intscenegen = pbge.randmaps.SceneGenerator(otherscene, game.content.gharchitecture.StoneBuilding(
            decorate=gharchitecture.MysteryDungeonDecor()))
        self.register_scene(nart, otherscene, intscenegen, ident="OTHERSCENE", dident="INTERIOR")
        hiddenroom = pbge.randmaps.rooms.ClosedRoom()
        otherscene.contents.append(hiddenroom)
        mystairs = self.register_element("STAIRSUP", ghwaypoints.StoneStairsUp(dest_wp=secretstairs))
        hiddenroom.contents.append(mystairs)

        cwnpc = self.register_element("CWORKER", gears.selector.random_character(combatant=False,
                                                                                 job=gears.jobs.ALL_JOBS[
                                                                                     "Construction Worker"]))
        hiddenroom.contents.append(cwnpc)

        mydungeon = dungeonmaker.DungeonMaker(
            nart, self, self.elements["OTHERSCENE"], "Wujung Undercity", gharchitecture.StoneBuilding(), 10,
            monster_tags=("ANIMAL", "CITY", "VERMIN",),
            scene_tags=(gears.tags.SCENE_DUNGEON, gears.tags.SCENE_RUINS, gears.tags.SCENE_SEMIPUBLIC),
            decor=gharchitecture.StoneUndercityDecor()
        )
        self.elements["DUNGEON"] = mydungeon.entry_level
        mycon2 = plotutility.TrapdoorToStairsUpConnector(nart, self, self.elements["OTHERSCENE"], mydungeon.entry_level)

        return True

    def STAIRSDOWN_menu(self, camp, thingmenu):
        thingmenu.desc = "You stand before a bookshelf. Do you want to read a book?"
        thingmenu.add_item("Read black book", self._read_black_book)
        thingmenu.add_item("Read blue book", self._read_blue_book)
        thingmenu.add_item("Read green book", self._read_green_book)
        thingmenu.add_item("Read purple book", self._read_purple_book)
        thingmenu.add_item("Read red book", self._read_red_book)
        thingmenu.add_item("Read white book", self._use_bookshelf)

    def _read_black_book(self, camp):
        # First sentence by me, the rest of the story written by TalkToTransformer.
        pbge.alert(
            """The black battlemech looked utterly invincible. It struck out a slash from its chest, the mercenary's chest pierced through. The mercenary found that the black battlemech's combat speed and its lethal reflexes were far surpassing that of the robot. At the same time, the mercenary could feel how quick the black battlemech was on its movements.\n \n Vayu punched back, swinging his spear, a wooden sword, even though the axe came in seconds. The black battlemech didn't even show any reaction at all.\n \n This opponent was very tough.""")

    def _read_blue_book(self, camp):
        # First sentence by me, the rest of the story written by TalkToTransformer.
        pbge.alert(
            """All that stood between the space pirates and the treasure was a lone blue mecha. It seemed to be at the point of becoming an ordinary mecha.\n \n That was the one the pirates had called a new type of mecha, one that defeated enemy machines in a single blow. They were machines that changed shapes and could create weapons.\n \n These were ZEBES, what the space pirates had named this mecha.\n \n Thinking of ZEBES, Thomas muttered "All the metal on that one is metal. Looks like its ability is to take the energy".""")

    def _read_green_book(self, camp):
        # First sentence by me, the rest of the story written by TalkToTransformer.
        pbge.alert(
            """A green mecha rolled into the dead zone. He was an Angel wearing a cape. A great horned helmet with a great ornate skull appeared on his head. He raised his arms, each joint jutting out sharply.\n \n Sasha ripped through space at speeds faster than bullets, but could only manage to keep up with one of the machines, and even then he only managed a glimpse of his face. The Angel helmet had received damage, and was covered in more scars. It made him look scarier.\n \n "Now, this will be fun!" the Angel said.""")

    def _read_purple_book(self, camp):
        # First sentence by me, the rest of the story written by TalkToTransformer.
        pbge.alert(
            """Carolyn stepped out from the cockpit of her purple mecha. "So he's not being as good as before?"\n \n "Er... well, not in the way you might think," said the mechanic, lowering his shoulder visor and turning his sunglasses to face her.\n \n "Then why is he still so confident?" asked Carolyn. "It doesn't make any sense."\n \n "His taste for politics is legendary," said the mechanic, indicating the facade that had kept Kiri's consciousness isolated and that had been the victim of Kimberly's advances.""")

    def _read_red_book(self, camp):
        # First sentence by me, the rest of the story written by TalkToTransformer.
        pbge.alert(
            """The battle was going poorly for the defenders, when out of nowhere a red mecha appeared. In the hands of this mecha the industrial city was seemingly taken over by metal, lifting everything that was in the way of the construction project above the buildings. The clock tower and factory buildings were falling in on themselves.\n \n A smile spread on Jondal's face as he saw this. "By the Emperor's clock... this is a miracle of construction."\n \n Conde winced. "What's a miracle of construction? I was raised as an engineer, and our government has a contract that we need a certain percentage to receive." """)

    def _use_bookshelf(self, camp):
        pbge.alert("Moving the white book activates a hidden staircase!")
        camp.go(self.elements["STAIRSUP"])

    def _ask_about_terminal(self, camp):
        self.asked_about_terminal = True

    def CWORKER_offers(self, camp):
        mylist = list()

        mylist.append(Offer(
            "[HELLO] While doing repair work we found this tunnel leading into the Wujung undercity. Nobody is supposed to go down there, but you look like you'd do alright.",
            context=ContextTag([context.HELLO]),
        ))

        return mylist

    def MECHANIC_offers(self, camp):
        mylist = list()

        mylist.append(Offer(
            "[HELLO] This is the Allied Armor custom shop; we sell all kinds of mecha upgrades and replacement parts.",
            context=ContextTag([context.HELLO]),
        ))

        mylist.append(Offer("[OPENSHOP]",
                            context=ContextTag([context.OPEN_SHOP]), effect=self.custom_shop,
                            data={"shop_name": "the Allied Armor customization shop", "wares": "parts"}
                            ))

        if not self.asked_about_terminal:
            mylist.append(Offer(
                "That's a mecha engineering terminal. You can find them at garages and shops all over the place. You can use it to add and remove parts from your mecha, if you have any spare parts laying around.",
                context=ContextTag([context.INFO]), effect=self._ask_about_terminal,
                data={"subject": "the terminal"}, no_repeats=True,
            ))

        return mylist

    def SHOPKEEPER_offers(self, camp):
        mylist = list()

        mylist.append(Offer("[HELLO] Allied Armor is Wujung's best source for mecha and custom parts.",
                            context=ContextTag([context.HELLO]),
                            ))

        mylist.append(Offer("[OPENSHOP]",
                            context=ContextTag([context.OPEN_SHOP]), effect=self.shop,
                            data={"shop_name": "Allied Armor", "wares": "mecha"}
                            ))

        return mylist


class DZD_WujungTires(Plot):
    LABEL = "DZDHB_WujungTires"

    active = True
    scope = "INTERIOR"

    def custom_init(self, nart):
        # Create a building within the town.
        building = self.register_element("_EXTERIOR", game.content.ghterrain.IndustrialBuilding(
            waypoints={"DOOR": ghwaypoints.GlassDoor(name="Wujung Tires")},
            door_sign=(game.content.ghterrain.FixitShopSignEast, game.content.ghterrain.FixitShopSignSouth),
            tags=[pbge.randmaps.CITY_GRID_ROAD_OVERLAP]), dident="LOCALE")

        # Add the interior scene.
        team1 = teams.Team(name="Player Team")
        team2 = teams.Team(name="Civilian Team", allies=(team1,))
        intscene = gears.GearHeadScene(35, 35, "Wujung Tires", player_team=team1, civilian_team=team2,
                                       attributes=(
                                       gears.tags.SCENE_PUBLIC, gears.tags.SCENE_BUILDING, gears.tags.SCENE_SHOP),
                                       scale=gears.scale.HumanScale)

        intscenegen = pbge.randmaps.SceneGenerator(intscene, game.content.gharchitecture.IndustrialBuilding())
        self.register_scene(nart, intscene, intscenegen, ident="INTERIOR", dident="LOCALE")
        foyer = self.register_element('_introom', pbge.randmaps.rooms.ClosedRoom(anchor=pbge.randmaps.anchors.south,
                                                                                 decorate=game.content.gharchitecture.CheeseShopDecor()),
                                      dident="INTERIOR")
        foyer.contents.append(ghwaypoints.MechEngTerminal())

        mycon2 = game.content.plotutility.TownBuildingConnection(nart, self, self.elements["LOCALE"], intscene,
                                                                 room1=building,
                                                                 room2=foyer, door1=building.waypoints["DOOR"],
                                                                 move_door1=False)

        npc = self.register_element("SHOPKEEPER",
                                    gears.selector.random_character(50, local_tags=self.elements["LOCALE"].attributes,
                                                                    job=gears.jobs.ALL_JOBS["Shopkeeper"],
                                                                    combatant=False))
        npc.place(intscene, team=team2)

        self.shop = services.Shop(npc=npc, ware_types=services.TIRE_STORE)

        return True

    def SHOPKEEPER_offers(self, camp):
        mylist = list()

        mylist.append(Offer("[HELLO] Wujung Tires, best mecha wheels and hover jets in town!",
                            context=ContextTag([context.HELLO]),
                            ))

        mylist.append(Offer("[OPENSHOP]",
                            context=ContextTag([context.OPEN_SHOP]), effect=self.shop,
                            data={"shop_name": "Wujung Tires", "wares": "gear"},
                            ))

        return mylist


class DZD_EliteEquipment(Plot):
    LABEL = "DZDHB_EliteEquipment"

    active = True
    scope = "INTERIOR"

    def custom_init(self, nart):
        # Create a building within the town.
        building = self.register_element("EXTERIOR", game.content.ghterrain.CommercialBuilding(
            waypoints={"DOOR": ghwaypoints.GlassDoor(name="Elite Equipment"),
                       "OTHER": ghwaypoints.GlassDoor(name="Allied Armor")},
            door_sign=(
            game.content.ghterrain.CrossedSwordsTerrainEast, game.content.ghterrain.CrossedSwordsTerrainSouth),
            other_sign=(game.content.ghterrain.AlliedArmorSignEast, game.content.ghterrain.AlliedArmorSignSouth),
            tags=[pbge.randmaps.CITY_GRID_ROAD_OVERLAP]), dident="LOCALE")

        tplot = self.add_sub_plot(nart, "DZDHB_AlliedArmor")

        # Add the interior scene.
        team1 = teams.Team(name="Player Team")
        team2 = teams.Team(name="Civilian Team")
        intscene = gears.GearHeadScene(35, 35, "Elite Equipment", player_team=team1, civilian_team=team2,
                                       attributes=(
                                       gears.tags.SCENE_PUBLIC, gears.tags.SCENE_BUILDING, gears.tags.SCENE_SHOP),
                                       scale=gears.scale.HumanScale)

        intscenegen = pbge.randmaps.SceneGenerator(intscene, game.content.gharchitecture.CommercialBuilding())
        self.register_scene(nart, intscene, intscenegen, ident="INTERIOR", dident="LOCALE")
        foyer = self.register_element('_introom', pbge.randmaps.rooms.ClosedRoom(anchor=pbge.randmaps.anchors.south,
                                                                                 decorate=game.content.gharchitecture.CheeseShopDecor()),
                                      dident="INTERIOR")

        mycon2 = game.content.plotutility.TownBuildingConnection(nart, self, self.elements["LOCALE"], intscene,
                                                                 room1=building,
                                                                 room2=foyer, door1=building.waypoints["DOOR"],
                                                                 move_door1=False)

        npc = self.register_element("SHOPKEEPER",
                                    gears.selector.random_character(50, local_tags=self.elements["LOCALE"].attributes,
                                                                    job=gears.jobs.ALL_JOBS["Shopkeeper"]))
        npc.place(intscene, team=team2)

        self.shop = services.Shop(npc=npc, rank=50,
                                  ware_types=services.GENERAL_STORE)

        return True

    def SHOPKEEPER_offers(self, camp):
        mylist = list()

        mylist.append(Offer("[HELLO] Elite Equipment is your one stop source for deadzone survival gear.",
                            context=ContextTag([context.HELLO]),
                            ))

        mylist.append(Offer("[OPENSHOP]",
                            context=ContextTag([context.OPEN_SHOP]), effect=self.shop,
                            data={"shop_name": "Elite Equipment", "wares": "gear"},
                            ))

        return mylist


CD_BIOTECH_DISCOVERIES = "BIOTECH_DISCOVERIES"
CD_BIOTECH_REPORTED = "BIOTECH_REPORTED"


class BiotechDiscovery(object):
    def __init__(self, camp, reply, offer, cash_rank, on_sale_fun=None, activate=True):
        if activate:
            self.activate(camp)
        self.reply = reply
        self.cash = gears.selector.calc_threat_points(cash_rank, 50)
        # Stick "{cash}" in the offer to say how much the PC earns.
        self.offer = offer.format(cash="${:,}".format(self.cash))
        self.on_sale_fun = on_sale_fun

    def activate(self, camp):
        camp.campdata[CD_BIOTECH_DISCOVERIES].append(self)

    def get_offer(self):
        return Offer(self.offer, (context.CUSTOM,), effect=self, no_repeats=True,
                     data={"reply": self.reply})

    def __call__(self, camp: gears.GearHeadCampaign):
        camp.credits += self.cash
        camp.campdata[CD_BIOTECH_DISCOVERIES].remove(self)
        camp.campdata[CD_BIOTECH_REPORTED] += 1
        if self.on_sale_fun:
            self.on_sale_fun(camp)


class DZD_WujungHospital(Plot):
    LABEL = "DZDHB_WujungHospital"

    active = True
    scope = "INTERIOR"

    def custom_init(self, nart):
        # Create a building within the town.
        building = self.register_element("_EXTERIOR", game.content.ghterrain.WhiteBrickBuilding(
            waypoints={"DOOR": ghwaypoints.GlassDoor(name="Wujung Hospital")},
            door_sign=(game.content.ghterrain.HospitalSignEast, game.content.ghterrain.HospitalSignSouth),
            tags=[pbge.randmaps.CITY_GRID_ROAD_OVERLAP]), dident="LOCALE")

        # Add the interior scene.
        team1 = teams.Team(name="Player Team")
        team2 = self.register_element("CIV_TEAM", teams.Team(name="Civilian Team"))
        intscene = gears.GearHeadScene(35, 35, "Wujung Hospital", player_team=team1, civilian_team=team2,
                                       attributes=(
                                       gears.tags.SCENE_PUBLIC, gears.tags.SCENE_BUILDING, gears.tags.SCENE_HOSPITAL),
                                       scale=gears.scale.HumanScale)

        intscenegen = pbge.randmaps.PackedBuildingGenerator(intscene, game.content.gharchitecture.HospitalBuilding())
        self.register_scene(nart, intscene, intscenegen, ident="INTERIOR", dident="LOCALE")
        foyer = self.register_element('_introom', pbge.randmaps.rooms.ClosedRoom(anchor=pbge.randmaps.anchors.south, ),
                                      dident="INTERIOR")
        foyer.contents.append(team2)

        mycon2 = game.content.plotutility.TownBuildingConnection(nart, self, self.elements["LOCALE"], intscene,
                                                                 room1=building,
                                                                 room2=foyer, door1=building.waypoints["DOOR"],
                                                                 move_door1=False)

        doctor = self.register_element("DOCTOR",
                                       gears.selector.random_character(50,
                                                                       local_tags=self.elements["LOCALE"].attributes,
                                                                       job=gears.jobs.ALL_JOBS["Doctor"]))
        doctor.place(intscene, team=team2)

        npc = self.register_element("NURSE",
                                    gears.selector.random_character(50, local_tags=self.elements["LOCALE"].attributes,
                                                                    job=gears.jobs.ALL_JOBS["Nurse"]))
        npc.place(intscene, team=team2)

        room2 = self.register_element('_room2', pbge.randmaps.rooms.ClosedRoom(), dident="INTERIOR")
        room2.contents.append(ghwaypoints.RecoveryBed())
        room2.contents.append(ghwaypoints.RecoveryBed())

        cybershop = services.Shop(npc=None
                                  , rank=50
                                  , ware_types=services.CYBERWARE_STORE
                                  )
        room2.contents.append(ghwaypoints.CyberdocTerminal(shop=cybershop))

        team3 = teams.Team(name="Cyberdoc Terminal Team", allies=(team1, team2))
        cybertekno = self.register_element("CYBERTEKNO",
                                           gears.selector.random_character(60, local_tags=self.elements[
                                               "LOCALE"].attributes,
                                                                           job=gears.jobs.ALL_JOBS["Tekno"]))
        team3.contents.append(cybertekno)
        room2.contents.append(team3)
        self.asked_about_cyberdoc = False
        self.asked_about_cyberware = False

        room5 = self.register_element('_room5',
                                      pbge.randmaps.rooms.ClosedRoom(decorate=gharchitecture.UlsaniteOfficeDecor()),
                                      dident="INTERIOR")

        team5 = teams.Team(name="BioCorp Team")
        room5.contents.append(team5)
        npc = self.register_element("BIOCORPNPC",
                                    gears.selector.random_character(30, local_tags=self.elements["LOCALE"].attributes,
                                                                    faction=gears.factions.BioCorp,
                                                                    job=gears.jobs.ALL_JOBS["Researcher"]))
        team5.contents.append(npc)
        self._asked_about_bc_mission = False
        self._asked_about_biomonsters = False
        self._hamster_state = 0
        nart.camp.campdata[CD_BIOTECH_DISCOVERIES] = list()
        nart.camp.campdata[CD_BIOTECH_REPORTED] = 0

        cage = self.register_element("_HAMSTER", ghwaypoints.HamsterCage(name="Hamster Cage",
                                                                         desc="You stand before a cage of cute, fluffy hamsters. Oddly, all of the hamsters appear to be walking on their back legs. Other than that they seem perfectly normal and content.",
                                                                         plot_locked=True))
        room5.contents.append(cage)

        self.add_sub_plot(nart, "DZD_WuHosMedicLancemate")

        self.shop = services.Shop(services.PHARMACY, allow_misc=False, caption="Pharmacy", rank=50, npc=doctor)

        return True

    def BIOCORPNPC_offers(self, camp):
        mylist = list()

        mylist.append(Offer(
            "[HELLO] This is the BioCorp Medical Research Office. We coordinate efforts between the main office in Snake Lake and projects like Mesa Lab in Last Hope and the various expeditions currently working in the dead zone.",
            context=ContextTag([context.HELLO]),
        ))

        if not self._asked_about_bc_mission:
            mylist.append(Offer(
                "No mission exactly, but if you're heading into the dead zone there may be something you can do for me. BioCorp is offering cash rewards for lostech artifacts or any data regarding PreZero synthoid technology. If you find anything interesting during your travels I can pay you for the information.",
                context=ContextTag([context.MISSION]), subject_start=True, subject=self,
                effect=self._tell_about_bc_mission
            ))
        else:
            for btd in camp.campdata[CD_BIOTECH_DISCOVERIES]:
                mylist.append(btd.get_offer())

        mylist.append(Offer(
            "[GOOD] I look forward to hearing about what you find out there.",
            context=ContextTag([context.ACCEPT]), subject=self
        ))
        mylist.append(Offer(
            "[UNDERSTOOD] The offer remains, if you ever change your mind.",
            context=ContextTag([context.DENY]), subject=self
        ))

        if not self._asked_about_biomonsters:
            mylist.append(Offer(
                "What, you think that just because this is a BioCorp office we're going to have Hunter-X synths running around all over the place?! BioCorp has been out of the autonomous bioweapon business for thirty years now. Seriously, you raze one tiny village to the ground with an experiment gone horribly wrong and they never let you forget...",
                context=ContextTag([context.CUSTOM]), effect=self._tell_about_biomonsters,
                data={"reply": "I expected this place to be full of biomonsters."}, no_repeats=True,
            ))

        if self._hamster_state == 1:
            mylist.append(Offer(
                "They are my pets. They're 'golden tallboys', imported from Amazonia. People say they're supposed to be highly intelligent but mine are only interested in eating and sleeping. Still, they're good company for the nights when I have to work overtime.",
                context=ContextTag([context.INFO]), effect=self._tell_about_hamsters,
                data={"subject": "those hamsters"}, no_repeats=True,
            ))

        return mylist

    def _tell_about_hamsters(self, camp):
        self._hamster_state = 2

    def _tell_about_biomonsters(self, camp):
        self._asked_about_biomonsters = True

    def _tell_about_bc_mission(self, camp):
        self._asked_about_bc_mission = True

    def _HAMSTER_BUMP(self, camp):
        if self._hamster_state == 0:
            self._hamster_state = 1

    def _HAMSTER_menu(self, camp, thingmenu):
        thingmenu.add_item("Pet the hamsters.", self._pet_hamster)
        thingmenu.add_item("Leave the hamsters alone.", None)

    def _pet_hamster(self, camp):
        pbge.alert("You play with the hamsters for a little while and make some new friends.")

    def DOCTOR_offers(self, camp):
        mylist = list()

        mylist.append(Offer("[HELLO] You seem to be in good health today.",
                            context=ContextTag([context.HELLO]),
                            ))

        mylist.append(Offer("[OPENSHOP]",
                            context=ContextTag([context.OPEN_SHOP]), effect=self.shop,
                            data={"shop_name": "Wujung Pharmacy", "wares": "medicine"}
                            ))

        return mylist

    def CYBERTEKNO_offers(self, camp):
        mylist = list()

        mylist.append(
            Offer("[HELLO] Wujung Hospital is proud of its automated Cyberdoc terminal for all your cyberware needs."
                  , context=ContextTag([context.HELLO])
                  ))

        if not self.asked_about_cyberdoc:
            mylist.append(Offer(
                "The Cyberdoc terminal has a stock of cyberware it can install into your body, directly improving your capabilities, or it can install cyberware you acquired elsewhere. It can even remove cyberware, by cloning a non-cyberware organ from your cells."
                , context=ContextTag([context.INFO]), effect=self._ask_about_cyberdoc
                , data={"subject": "the Cyberdoc terminal"}, no_repeats=True
                ))
        if not self.asked_about_cyberware:
            mylist.append(Offer(
                "Cyberware is installed into your body by the Cyberdoc terminal to give you new capabilities. Modern cyberware reduces stamina, an improvement over the 'cyberdisfunctions' of old; a general healthy constitution lets more cyberware be installed safely, as well as the patient's knowledge of cybertech."
                , context=ContextTag([context.INFO]), effect=self._ask_about_cyberware
                , data={"subject": "cyberware"}, no_repeats=True
                ))

        return mylist

    def _ask_about_cyberdoc(self, *ignored):
        self.asked_about_cyberdoc = True

    def _ask_about_cyberware(self, *ignored):
        self.asked_about_cyberware = True


#   *********************************
#   ***  DZD_WuHosMedicLancemate  ***
#   *********************************
#
# A random lancemate for Wujung Hospital.

class DZD_WuHosMedicLancemate(Plot):
    LABEL = "DZD_WuHosMedicLancemate"
    JOBS = ("Paramedic", "Field Medic", "Firefighter", "Paramedic", "Firefighter", "Doctor", "Nurse", "Paramedic")

    def custom_init(self, nart):
        npc = gears.selector.random_character(job=gears.jobs.ALL_JOBS[random.choice(self.JOBS)],
                                              rank=random.randint(10, 50),
                                              mecha_colors=gears.color.random_mecha_colors(),
                                              local_tags=tuple(self.elements["LOCALE"].attributes),
                                              combatant=True)
        self.register_element("NPC", npc, dident="CIV_TEAM")
        self.add_sub_plot(nart, "RLM_Relationship", elements={"NPC_SCENE": self.elements["INTERIOR"]})
        return True


class DZD_LongRoadLogistics(Plot):
    LABEL = "DZDHB_LongRoadLogistics"

    active = True
    scope = "INTERIOR"

    def custom_init(self, nart):
        # Create a building within the town.
        building = self.register_element("_EXTERIOR", game.content.ghterrain.ConcreteBuilding(
            waypoints={"DOOR": ghwaypoints.WoodenDoor(name="Long Road Logistics")},
            tags=[pbge.randmaps.CITY_GRID_ROAD_OVERLAP]), dident="LOCALE")

        # Add the interior scene.
        team1 = teams.Team(name="Player Team")
        team2 = self.register_element("CIV_TEAM", teams.Team(name="Civilian Team"))
        intscene = gears.GearHeadScene(50, 50, "Long Road Logistics", player_team=team1, civilian_team=team2,
                                       attributes=(
                                           gears.tags.SCENE_PUBLIC, gears.tags.SCENE_GARAGE, gears.tags.SCENE_BUILDING,
                                           gears.tags.SCENE_TRANSPORT),
                                       scale=gears.scale.HumanScale)

        intscenegen = pbge.randmaps.PackedBuildingGenerator(intscene, game.content.gharchitecture.IndustrialBuilding())
        self.register_scene(nart, intscene, intscenegen, ident="INTERIOR", dident="LOCALE")
        foyer = self.register_element('_introom',
                                      pbge.randmaps.rooms.MostlyOpenRoom(12, 15, anchor=pbge.randmaps.anchors.south, ),
                                      dident="INTERIOR")
        foyer.contents.append(team2)
        for t in range(random.randint(5, 12)):
            foyer.contents.append(ghwaypoints.ShippingShelves())

        mycon2 = game.content.plotutility.TownBuildingConnection(nart, self, self.elements["LOCALE"], intscene,
                                                                 room1=building,
                                                                 room2=foyer, door1=building.waypoints["DOOR"],
                                                                 move_door1=False)

        npc = self.register_element("DISPATCHER",
                                    gears.selector.random_character(50, local_tags=self.elements["LOCALE"].attributes,
                                                                    job=gears.jobs.ALL_JOBS["Dispatcher"]))
        npc.place(intscene, team=team2)

        npc = self.register_element("TRUCKER",
                                    gears.selector.random_character(50, local_tags=self.elements["LOCALE"].attributes,
                                                                    job=gears.jobs.ALL_JOBS["Trucker"]))
        npc.place(intscene, team=team2)

        room2 = self.register_element('_room2',
                                      pbge.randmaps.rooms.ClosedRoom(decorate=gharchitecture.StorageRoomDecor()),
                                      dident="INTERIOR")
        room3 = self.register_element('_room3',
                                      pbge.randmaps.rooms.ClosedRoom(decorate=gharchitecture.StorageRoomDecor()),
                                      dident="INTERIOR")
        room4 = self.register_element('regex_room',
                                      pbge.randmaps.rooms.MostlyOpenRoom(decorate=gharchitecture.UlsaniteOfficeDecor()),
                                      dident="INTERIOR")
        room5 = self.register_element('kettel_room',
                                      pbge.randmaps.rooms.MostlyOpenRoom(decorate=gharchitecture.UlsaniteOfficeDecor()),
                                      dident="INTERIOR")

        room4.contents.append(ghwaypoints.RegExLogo())
        team4 = teams.Team(name="RegEx Team")
        room4.contents.append(team4)
        npc = self.register_element("REGEXNPC",
                                    gears.selector.random_character(30, local_tags=self.elements["LOCALE"].attributes,
                                                                    faction=gears.factions.RegExCorporation,
                                                                    job=gears.jobs.ALL_JOBS["Corporate Executive"]))
        team4.contents.append(npc)
        self._asked_about_construction = False

        self.add_sub_plot(nart, "DZD_LoRoTruckerLancemate")

        return True

    def REGEXNPC_offers(self, camp):
        mylist = list()

        if not self._asked_about_construction:
            mylist.append(Offer(
                "[HELLO] Welcome to RegEx Construction Services, temporarily relocated to the Long Road Industrial Complex since Typhon smooshed the hell out of our old offices last summer.",
                context=ContextTag([context.HELLO]),
            ))
            mylist.append(Offer(
                "I'd love to help, but road security to the dead zone isn't what it used to be. Building a power plant is going to involve lots of materials and heavy machinery. We're going to need a secure transit route from here to {} before we can even talk about starting.".format(
                    self.elements["DZ_TOWN_NAME"]),
                context=ContextTag([context.INFO]), subject=self, subject_start=True,
                data={"subject": "building a new power plant for {}".format(self.elements["DZ_TOWN_NAME"])},
                no_repeats=True,
            ))
        else:
            mylist.append(Offer(
                "[HELLO] Any update on the road situation leading to {}?".format(self.elements["DZ_TOWN_NAME"]),
                context=ContextTag([context.HELLO]),
            ))

        mylist.append(Offer(
            "That would be great. More work will help us to rebuild our office faster, and I for one can't wait to get out of this building. It always smells like coffee and magnetic grease in here.",
            context=ContextTag([context.CUSTOM]), subject=self,
            data={"reply": "I'll see what I can do about that."}, effect=self._tell_about_services
        ))

        return mylist

    def _tell_about_services(self, camp):
        self.memo = "You spoke to {REGEXNPC} of RegEx Construction about building a new power plant for {DZ_TOWN_NAME}. In order for {REGEXNPC.gender.object_pronoun} to do that, there must be a secure trade route between there an Wujung.".format(
            **self.elements)
        self._asked_about_construction = True
        camp.campdata["CONSTRUCTION_ARRANGED"] = True

    def DISPATCHER_offers(self, camp):
        mylist = list()

        mylist.append(Offer(
            "[HELLO] This is Long Road Logistics. Our job is to keep goods moving from the Joseon green zone through the dead zone all the way to the Pan-Eurasian territories.",
            context=ContextTag([context.HELLO]),
        ))

        return mylist

    def TRUCKER_offers(self, camp):
        mylist = list()

        mylist.append(Offer(
            "[HELLO] I'm in charge of salvage operations here at Long Road Logistics.",
            context=ContextTag([context.HELLO]),
        ))

        return mylist


#   **********************************
#   ***  DZD_LoRoTruckerLancemate  ***
#   **********************************
#
# A random lancemate for Long Road Logistics

class DZD_LoRoTruckerLancemate(Plot):
    LABEL = "DZD_LoRoTruckerLancemate"
    JOBS = ("Trucker", "Mechanic", "Construction Worker", "Trader", "Trucker")

    def custom_init(self, nart):
        npc = gears.selector.random_character(job=gears.jobs.ALL_JOBS[random.choice(self.JOBS)],
                                              rank=random.randint(10, 50),
                                              mecha_colors=gears.color.random_mecha_colors(),
                                              local_tags=tuple(self.elements["LOCALE"].attributes),
                                              combatant=True)
        self.register_element("NPC", npc, dident="CIV_TEAM")
        self.add_sub_plot(nart, "RLM_Relationship", elements={"NPC_SCENE": self.elements["INTERIOR"]})
        return True

#   ****************************
#   ***  DZD_BLACK_ISLE_PUB  ***
#   ****************************

class DZD_BlackIslePub(Plot):
    LABEL = "DZD_BLACK_ISLE_PUB"
    active = True
    scope = "INTERIOR"

    def custom_init(self, nart):
        # Create the shopkeeper
        npc1 = self.register_element("SHOPKEEPER", gears.selector.random_character(
            self.rank, local_tags=self.elements["METROSCENE"].attributes,
            job=gears.jobs.ALL_JOBS["Bartender"]))

        self.shopname = "Black Isle Pub"

        # Create a building within the town.
        dd = {
            "image_bottom": 'terrain_building_brick_b.png', "image_top": 'terrain_building_brick_u.png',
            "blocks": (
            pbge.scenes.movement.Walking, gears.geffects.Skimming, gears.geffects.Rolling, pbge.scenes.movement.Flying),
            "colors": (
            gears.color.Ebony, gears.color.DeepGrey, gears.color.BattleshipGrey, gears.color.Black, gears.color.Black)
        }
        building = self.register_element("_EXTERIOR", game.content.ghterrain.BrickBuilding(
            waypoints={"DOOR": ghwaypoints.WoodenDoor(name="Black Isle Pub")},
            tags=[pbge.randmaps.CITY_GRID_ROAD_OVERLAP], duck_dict=dd), dident="LOCALE", )

        # Add the interior scene.
        team1 = teams.Team(name="Player Team")
        team2 = teams.Team(name="Civilian Team")
        intscene = gears.GearHeadScene(
            35, 35, self.shopname, player_team=team1, civilian_team=team2,
            attributes=(gears.tags.SCENE_PUBLIC, gears.tags.SCENE_BUILDING, gears.tags.SCENE_MEETING, gears.tags.SCENE_CULTURE),
            scale=gears.scale.HumanScale)

        intscenegen = pbge.randmaps.PackedBuildingGenerator(
            intscene, gharchitecture.StoneBuilding(floor_terrain=game.content.ghterrain.HardwoodFloor)
        )
        self.register_scene(nart, intscene, intscenegen, ident="INTERIOR", dident="LOCALE")
        foyer = self.register_element('FOYER', pbge.randmaps.rooms.ClosedRoom(width=random.randint(20, 25),
                                                                                 height=random.randint(11, 15),
                                                                                 anchor=pbge.randmaps.anchors.south),
                                      dident="INTERIOR")

        mybar = ghrooms.BarArea(random.randint(5, 10), random.randint(2, 3), anchor=pbge.randmaps.anchors.north)
        foyer.contents.append(mybar)

        barteam = self.register_element("BAR_TEAM", teams.Team(name="Bar Team", allies=[team2]))
        mybar.contents.append(barteam)
        npc1.place(intscene, team=barteam)

        mycon2 = plotutility.TownBuildingConnection(
            nart, self, self.elements["LOCALE"], intscene, room1=building,
            room2=foyer, door1=building.waypoints["DOOR"], move_door1=False)

        self.add_sub_plot(nart, "TAVERN_BONUS", necessary=False)

        return True

    def SHOPKEEPER_offers(self, camp):
        mylist = list()

        mylist.append(Offer("[HELLO] Welcome to {}.".format(self.shopname),
                            context=ContextTag([context.HELLO]),
                            ))

        return mylist


#   *******************************
#   ***  DZD_SKIPPYS_NIGHT_OUT  ***
#   *******************************

class DZD_SkippysNightOut(Plot):
    LABEL = "DZD_SKIPPYSNIGHTOUT"
    active = True
    scope = "METRO"

    RUMOR = pbge.plots.Rumor(
        "Skip Tracer had a rough time last night",
        offer_msg="Well, it's not really my place to say what happened... You can find out all about it if you ask him at {NPC_SCENE}.",
        offer_subject="Skip Tracer",
        memo="Skippy the bounty hunter apparently had a rough time last night.",
        prohibited_npcs=("NPC",)
    )

    VERB_SUS_CARDS = (
        {"name": "Carouse", "to_verb": "to carouse with Skippy", "verbed": "caroused all night with Skippy",
         "did_not_verb": "didn't carouse with Skippy", "data": {"image_name": "mystery_verbs.png", "frame": 2}},
        {"name": "Make Out", "to_verb": "to make out with Skippy", "verbed": "made out with Skippy",
         "did_not_verb": "didn't make out with Skippy", "data": {"image_name": "mystery_verbs.png", "frame": 1}},
        {"name": "Gambling", "to_verb": "to gamble with Skippy", "verbed": "gambled with Skippy",
         "did_not_verb": "didn't gamble with Skippy", "data": {"image_name": "mystery_verbs.png", "frame": 5}},
        {"name": "Venus Xozu", "to_verb": "to drink too much Vesuvian Xozu with Skippy",
         "verbed": "drank too much Vesuvian Xozu with Skippy",
         "did_not_verb": "didn't go drinking with Skippy", "data": {"image_name": "mystery_verbs.png", "frame": 3}},
        {"name": "Tattoos", "to_verb": "to get a matching tattoo with Skippy",
         "verbed": "got a matching tattoo with Skippy",
         "did_not_verb": "didn't get tattoos with Skippy", "data": {"image_name": "mystery_verbs.png", "frame": 4}},
    )

    SCENE_SUS_CARDS = {
        "Bronze Horse Inn": {"name": "The Inn", "data": {"image_name": "mystery_places.png", "frame": 0}},
        "Allied Armor": {"name": "Mecha Shop", "data": {"image_name": "mystery_places.png", "frame": 2}},
        "Black Isle Pub": {"name": "The Pub", "data": {"image_name": "mystery_places.png", "frame": 1}},
        "Long Road Logistics": {"name": "Truck Stop", "data": {"image_name": "mystery_places.png", "frame": 3}},
        "Blue Fortress": {"name": "Barracks", "data": {"image_name": "mystery_places.png", "frame": 4}}
    }

    def custom_init(self, nart):
        self.seek_element(nart, "NPC_SCENE", self._is_best_scene, scope=self.elements["METROSCENE"])

        skippy = nart.camp.get_major_npc(gears.oldghloader.GH1Loader.NPC_SKIPPY)
        self.register_element("NPC", skippy, dident="NPC_SCENE")

        self.sus_elements = list()
        self.sus_elements.append(skippy)
        companion_cards = list()
        for t in range(5):
            npc = self.seek_element(nart, "COMPANION{}".format(t), self._is_best_npc, scope=self.elements["METROSCENE"],
                                    must_find=False)
            if not npc:
                nuscene = self.seek_element(nart, "NPC_SCENE_{}".format(t), self._is_best_scene,
                                            scope=self.elements["METROSCENE"])
                npc = self.register_element("COMPANION{}".format(t), gears.selector.random_character(
                    camp=nart.camp, age=random.randint(20, 25), job=gears.jobs.ALL_JOBS["Mecha Pilot"]
                ), dident="NPC_SCENE_{}".format(t))
            companion_cards.append(ghchallenges.NPCSusCard(npc))
            self.sus_elements.append(npc)

        friend_susdeck = pbge.okapipuzzle.SusDeck("Companion", companion_cards)

        activity_cards = list()
        for t in range(5):
            activity_cards.append(pbge.okapipuzzle.VerbSusCard(**self.VERB_SUS_CARDS[t]))

        activity_susdeck = pbge.okapipuzzle.SusDeck("Activity", activity_cards)

        scene_cards = list()
        for k,v in self.SCENE_SUS_CARDS.items():
            self.scene_to_seek = k
            scene = self.seek_element(nart, "_SCENE{}".format(len(scene_cards)), self._is_good_meeting_scene,
                                      scope=self.elements["METROSCENE"])
            scene_cards.append(pbge.okapipuzzle.NounSusCard(gameob=scene, role=pbge.okapipuzzle.SUS_LOCATION, **v))
            self.sus_elements.append(scene)
        scene_susdeck = pbge.okapipuzzle.SusDeck("Location", scene_cards)

        mymystery = self.register_element("MYSTERY", pbge.okapipuzzle.OkapiPuzzle(
            "Skippy's night out", (friend_susdeck, activity_susdeck, scene_susdeck), "{a} {b.verbed} at {c}."
        ))

        self.register_element("SOLUTION_NPC", mymystery.solution[0].gameob)

        mychallenge = self.register_element("CHALLENGE", pbge.challenges.MysteryChallenge(
            "Skippy's Challenge", mymystery,
            memo=pbge.challenges.MysteryMemo("Find out what happened to Skippy's legs."), active=False,
            oppoffers=[
                pbge.challenges.AutoOffer(
                    dict(
                        msg="[I_KNOW_THINGS_ABOUT_STUFF] [LISTEN_TO_MY_INFO]",
                        context=ContextTag([context.CUSTOM, ]), effect=self._get_a_clue,
                        data={
                            "reply": "Do you know anything about what happened to Skippy last night?",
                            "stuff": "Skippy's misadventure"
                        }, dead_end=True
                    ), active=True, uses=99,
                    involvement=ghchallenges.InvolvedIfCluesRemainAnd(
                        mymystery, ghchallenges.InvolvedMetroResidentNPCs(self.elements["METROSCENE"],
                                                                          exclude=(skippy,))),
                    access_fun=ghchallenges.AccessSocialRoll(
                        gears.stats.Perception, gears.stats.Negotiation, self.rank, untrained_ok=True
                    )
                ),
                pbge.challenges.AutoOffer(
                    dict(
                        msg="[THINK_ABOUT_THIS] [I_REMEMBER_NOW]",
                        context=ContextTag([context.CUSTOM, ]),
                        data={
                            "reply": "Do you remember seeing Skippy last night?",
                            "stuff": "Skippy's misadventure"
                        }, dead_end=True
                    ), active=True, uses=99,
                    involvement=ghchallenges.InvolvedIfAssociatedCluesRemainAnd(mymystery, friend_susdeck),
                    npc_effect=self._get_associated_clue,
                ),
            ],
        ))

        self.got_legs_story = False
        self.started_mission = False
        self.got_mystery_tutorial = False

        self.returned_legs = False
        self.heard_explanation = False

        # Create the legs. They aren't stolen, exactly, but you'd have to be a pretty shady shopkeeper to buy them.
        self.legs = self.register_element(
            "_CYBERLEGS",
            gears.base.Treasure(name="Cyberlegs", value=120000, weight=120, stolen=True,
                                desc="A pair of cyberlegs, mysteriously abanadoned.")
        )

        return True

    def _get_associated_clue(self, camp, npc):
        candidates = [c for c in self.elements["MYSTERY"].unknown_clues if c.is_involved(npc)]
        if candidates:
            self.elements["CHALLENGE"].advance(camp, random.choice(candidates))
        else:
            self.elements["CHALLENGE"].advance(camp)

    def _get_a_clue(self, camp):
        self.elements["CHALLENGE"].advance(camp)

    def _is_best_scene(self, nart, candidate):
        return isinstance(candidate, gears.GearHeadScene) and gears.tags.SCENE_PUBLIC in candidate.attributes

    def _is_best_npc(self, nart, candidate):
        return (isinstance(candidate, gears.base.Character) and candidate.combatant and
                18 < candidate.get_age(nart.camp) <= 30 and
                nart.camp.is_not_lancemate(candidate) and candidate not in self.sus_elements)

    def _is_good_meeting_scene(self, nart, candidate):
        return (isinstance(candidate, gears.GearHeadScene) and candidate.name == self.scene_to_seek)

    def NPC_offers(self, camp: gears.GearHeadCampaign):
        mylist = list()

        if not self.got_legs_story:
            if camp.pc.has_badge("Typhon Slayer"):
                mylist.append(Offer(
                    "On the way from Wujung to Snake Lake, Typhon stopped by to wreck Ipshil. I was there with the city militia but we didn't stand a chance against that monster. My Vadel went critical and I got caught in the blast when I ejected. Losing your legs once is bad enough but losing my cyberlegs again last night was a whole new level of suck.",
                    context=ContextTag([context.CUSTOM, ]), effect=self._get_legs_story,
                    data={"reply": "What happened to your legs?"}
                ))

            game.ghdialogue.TagBasedPartyReply(
                Offer(
                    "Yeah, losing your legs will do that to you. Check out my arms though- I haven't been this buff since ever. When Typhon attacked Ipshil I was one of the defenders, but we didn't stand a chance. My engine went boom and I barely made it out in time... part of me didn't make it out in time. So now my doctor has me learning to use cyberlegs.",
                    context=ContextTag([context.CUSTOM, ]), effect=self._get_legs_story,
                    data={"reply": "You've lost some weight since the last time I saw you."}
                ), camp, mylist, (gears.oldghloader.GH1Loader.NPC_VIKKI,)
            )

        if not self.started_mission:
            mylist.append(Offer(
                "So last night I was out partying with some friends. This morning I woke up, back at the hotel, but without my prosthetic legs. No idea where I left them. No idea how I got back to the hotel without them. I don't suppose you could help me track them down and figure out what happened last night?",
                context=ContextTag([context.INFO, ]), effect=self._start_mission,
                data={"subject": "your cyberlegs"}, subject="cyberlegs", no_repeats=True,
            ))

            if self.memo:
                mylist.append(Offer(
                    "Wild?! That ain't the half of it. Y'see, I was out partying with some friends. This morning I woke up, back at the hotel, but without my prosthetic legs. No idea where I left them. No idea how I got back to the hotel without them. I don't suppose you could help me track them down and figure out what happened last night?",
                    context=ContextTag([context.CUSTOM, ]), effect=self._start_mission,
                    data={"reply": "I hear you had a wild time last night."},
                ))

        mylist.append(Offer(
            "That's the thing; I left this wheelchair at the hotel! Usually I prefer the chair for day-to-day getting around, but my legs are more convenient for clubbing. It's a real mystery, I'll tell you that.",
            context=ContextTag([context.CUSTOMREPLY, ]),
            data={"reply": "Maybe you came back to the hotel in your wheelchair?"},
            subject="prosthetic legs"
        ))

        if not self.got_mystery_tutorial:
            mylist.append(Offer(
                "That's kind of my job, being a bounty hunter and all. The first thing you need to do is collect clues. Check the memo browser on your phone by pressing \"m\". When reading about the mystery you're working on, an extra button will appear marked \"Examine Clues\". Press that to review the clues you've found and to test different solutions.",
                context=ContextTag([context.INFO, ]), no_repeats=True,
                data={"subject": "solving mysteries"}, subject="mystery", effect=self._give_mystery_tutorial
            ))

        mylist.append(Offer(
            "Thanks. Good luck out there.",
            context=ContextTag([context.CUSTOMREPLY, ]), no_repeats=True, allow_generics=False,
            data={"reply": "I'll get to work on it right away."}, subject="mystery"
            ))

        mychallenge: pbge.challenges.MysteryChallenge = self.elements["CHALLENGE"]
        if mychallenge.active:
            mylist.append(Offer(
                "[HELLO] How's the search going for my cyberlegs?",
                context=ContextTag([context.HELLO, ])
            ))

            if mychallenge.is_won():
                mylist.append(Offer(
                    "Good work! And have you found my cyberlegs?",
                    context=ContextTag([context.CUSTOM, ]),
                    data={"reply": "I have solved the mystery of your night out."}, subject=self, subject_start=True
                ))
                if camp.party_has_item(self.elements["_CYBERLEGS"]):
                    mylist.append(Offer(
                        "Fantastic! I can take these back to the hotel and plug them into the charger. Look, if you ever need help on one of your adventures, just come back here and ask. I'd be happy to join your lance.",
                        context=ContextTag([context.CUSTOMREPLY, ]), data={"reply": "Yes, I have. Here they are."},
                        subject=self, effect=self._return_legs
                    ))

                else:
                    mylist.append(Offer(
                        "Well, if you've already solved the mystery, it can't be too hard to figure out where I left my legs.",
                        context=ContextTag([context.CUSTOMREPLY, ]), data={"reply": "Uh... [STILL_WORKING_ON_IT]"},
                        subject=self
                    ))

            elif mychallenge.mystery.known_clues:
                mylist.append(Offer(
                    "Well, come back here when you have some results.",
                    context=ContextTag([context.CUSTOM, ]), data={"reply": "[STILL_WORKING_ON_IT]"}
                ))

        return mylist

    EXPLANATIONS = (
        "We went around to a bunch of different bars, and I don't remember exactly but at some point his legs just weren't there anymore.", # Carouse
        "I'll be honest, things were getting a bit hot and heavy with us, and you know how sometimes your clothes just come off in that kind of situation? The same applies to cyberprosthetics.", # Make Out
        "The two of us got involved in a card game. I think the jerk we were playing against was cheating, because things went pretty bad for Skippy and he threw his legs in the pot. He lost, but what is anyone gonna do with a pair of used cyberlegs?", #Gambling
        "Not gonna lie. We got a bottle of Vesuvian Xozu, and it was good, but halfway through we had a mystical experience. Reality faded away and we were in astral space. A giant groundhog, who was a beautiful woman but also a groundhog, appeared and told Skippy to get on her back. As they were bouncing around the room his legs came off.", #Xozu
        "At some point, [God] knows why, we decided to go get matching tattoos. The harness for Skippy's legs was getting in the way of... where he got the tattoo. So we took his legs off and I guess we just forgot about them." #Tattoos
    )

    def SOLUTION_NPC_offers(self, camp):
        mylist = list()
        mychallenge: pbge.challenges.MysteryChallenge = self.elements["CHALLENGE"]
        if mychallenge.is_won() and not self.heard_explanation:
            explanation = self.EXPLANATIONS[mychallenge.mystery.decks[1].cards.index(mychallenge.mystery.solution[1])]
            mylist.append(Offer(
                "{} I suggest you search at {}.".format(explanation, mychallenge.mystery.solution[2].gameob),
                context=ContextTag([context.CUSTOM]), effect=self._hear_explanation,
                data={"reply": "I know you were with Skippy last night. Why don't you tell me what happened to his legs?"}
            ))

        return mylist

    def MYSTERY_SOLVED(self, camp):
        if self.legs:
            mydest = self.elements["MYSTERY"].solution[2].gameob
            mydest.contents.append(self.legs)
            self.legs = None

    def _return_legs(self, camp: gears.GearHeadCampaign):
        camp.take_item(self.elements["_CYBERLEGS"])
        self.elements["NPC"].relationship.tags.add(gears.relationships.RT_LANCEMATE)
        self.elements["CHALLENGE"].deactivate(camp)
        self.returned_legs = True
        if self.heard_explanation:
            self.end_plot(camp)

    def _hear_explanation(self, camp):
        self.heard_explanation = True
        if self.returned_legs:
            self.end_plot(camp)

    def _give_mystery_tutorial(self, camo):
        self.got_mystery_tutorial = True

    def _start_mission(self, camp):
        self.started_mission = True
        self.elements["CHALLENGE"].activate(camp)
        self.memo = None

    def _get_legs_story(self, camp):
        self.got_legs_story = True

