[
  {
    "name": "Scenario",
    "desc": "",
    "label": "SCENARIO",
    "vars": {
      "adventure_name": {"default_val": "Adventure!", "var_type": "string"},
      "adventure_desc": {"default_val": "Go fight some pirates.", "var_type": "text"},
      "adventure_date": {"default_val": "(158, 5, 12)", "var_type": "date"},
      "uname": {"default_val": "Scenario", "var_type": "string"}
    },
    "scripts": {
      "main": "#: includes\n#: plot",
      "includes": "import gears\nfrom pbge.plots import Plot, Adventure, PlotState\nimport pbge\nfrom pbge.dialogue import Offer, ContextTag\nfrom game import teams, ghdialogue, services\nfrom game.ghdialogue import context\nimport pygame\nimport random\nfrom game.content.ghwaypoints import Exit\nfrom game.content.plotutility import AdventureModuleData\nimport game\nfrom game.content import plotutility, ghwaypoints, gharchitecture, GHNarrativeRequest, ghterrain\nfrom game.memobrowser import Memo\n",
      "plot": "class {uname}_Scenario( Plot ):\n    LABEL = \"SCENARIO_{uname}\"\n    active = True\n    scope = True\n\n    ADVENTURE_MODULE_DATA = AdventureModuleData(\n        \"{adventure_name}\",\n        \"{adventure_desc}\",\n        {adventure_date}, None,\n    )\n\n    def custom_init( self, nart ):\n        self.ADVENTURE_MODULE_DATA.apply(nart.camp)\n\n        #:scenario_init\n        #:scenario_subplots\n\n        return True\n\n    #: world_methods"
    },
    "child_types": ["CITY","WORLD_FEATURE"]
  },
  {
    "name": "New Sub Faction",
    "desc": "Adds a new sub-faction to a world.",
    "label": "WORLD_FEATURE",
    "vars": {
      "faction_name": {"default_val": "the Them", "var_type": "string"},
      "base_faction": {"default_val": null, "var_type": "faction"}
    },
    "scripts": {
      "scenario_init": "self.register_element( \"FACTION_{_uid}\", gears.factions.Circle(nart.camp, parent_faction={base_faction}, name=\"{faction_name}\"))"
    },
    "elements": {
      "FACTION_{_uid}": {"e_type": "faction", "name": "{faction_name}"}
    }
  },
  {
    "name": "New Campaign Variable",
    "desc": "Define a campaign variable.",
    "label": "WORLD_FEATURE",
    "vars": {
      "var_name": {
        "var_type": "campaign_variable",
        "default_val": "x"
      },
      "value": {
        "default_val": 0,
        "var_type": "integer"
      }
    },
    "scripts": {
      "scenario_init": "nart.camp.campdata[\"{var_name}\"] = {value}"
    }
  },
  {
    "name": "Standard Lancemate Handler",
    "desc": "Adds the regular Lancemate handling scripts: an NPC can join your party if they have the lancemate tag; you can ask lancemates to leave if you are in a public scene; you can have a number of lancemates defined by the campaign..",
    "label": "WORLD_FEATURE",
    "vars": {
      "lancemate_slots": {"default_val": 3, "var_type": "integer"}
    },
    "scripts": {
      "scenario_init": "nart.camp.num_lancemates = {lancemate_slots}",
      "world_methods": "def _get_generic_offers( self, npc, camp ):\n    mylist = list()\n    if npc.relationship and gears.relationships.RT_LANCEMATE in npc.relationship.tags:\n        if camp.can_add_lancemate() and npc not in camp.party:\n            # If the NPC has the lancemate tag, they might join the party.\n            if npc.relationship.data.get(\"DZD_LANCEMATE_TIME_OFF\",0) <= camp.day:\n                mylist.append(Offer(\"[JOIN]\", is_generic=True, context=ContextTag([context.JOIN]), effect=game.content.plotutility.AutoJoiner(npc)))\n            else:\n                # This NPC is taking some time off. Come back tomorrow.\n                mylist.append(Offer(\"[COMEBACKTOMORROW_JOIN]\", is_generic=True, context=ContextTag([context.JOIN])))\n        elif npc in camp.party and gears.tags.SCENE_PUBLIC in camp.scene.attributes:\n            mylist.append(Offer(\"[LEAVEPARTY]\", is_generic=True, context=ContextTag([context.LEAVEPARTY]), effect=game.content.plotutility.AutoLeaver(npc)))\n        mylist.append(LMSkillsSelfIntro(npc))\n    return mylist"
    },
    "elements": {
      "FACTION_{_uid}": {"e_type": "faction", "name": "{faction_name}"}
    }
  },
  {
    "name": "New Metro Scene",
    "desc": "Adds a metro scene to the adventure. This is generally a city scene that serves as the player's home base between adventures. The metro scene handles the following things:\n - Provides a MetroDat slot for local plots.\n - Handles injury and death recovery.\n - Loads lancemate character dev plots (if enabled).",
    "label": "CITY",
    "is_new_branch": true,
    "vars": {
      "city_name": {"default_val": "Megacormack", "var_type": "string"},
      "scriptname": {"default_val": "Megacormack", "var_type": "string"},
      "city_faction": {"default_val": null, "var_type": "faction"},
      "lancedev_on": {"default_val": true, "var_type": "boolean"},
      "entrance_name": {"default_val": "Exit", "var_type": "string"},
      "entrance_desc": {"default_val": "Where do you want to go?", "var_type": "text"},
      "exploration_music": {"default_val":  "airtone_-_reCreation.ogg", "var_type": "music"},
      "combat_music": {"default_val":  "Late.ogg", "var_type": "music"}
    },
    "scripts": {
      "scenario_subplots": "self.add_sub_plot(nart, \"CITY_{uname}_{scriptname}_{_uid}\")",
      "main": "class {scriptname}_{_uid}_City( Plot ):\n    LABEL=\"CITY_{uname}_{scriptname}_{_uid}\"\n    active = True\n    scope = True\n    def custom_init( self, nart ):\n        #: city_init\n        #:scene_init\n        #: city_subplots\n        #: scene_subplots\n        return True\n    def METROSCENE_ENTER(self, camp):\n        #: city_enter\n    #: scene_methods",
      "city_init": "# Create a city scene.\nteam1 = teams.Team(name=\"Player Team\")\nteam2 = teams.Team(name=\"Civilian Team\", allies=(team1,))\nmyscene = gears.GearHeadScene(50, 50, \"{city_name}\", player_team=team1, civilian_team=team2,scale=gears.scale.HumanScale, is_metro=True, faction={city_faction}, attributes=(gears.personality.GreenZone, gears.tags.City, gears.tags.SCENE_PUBLIC), exploration_music=\"{exploration_music}\", combat_music=\"{combat_music}\")\n\n# Create a scene generator\nmyscenegen = pbge.randmaps.CityGridGenerator(myscene, game.content.gharchitecture.HumanScaleGreenzone(), road_terrain=game.content.ghterrain.Flagstone)\n\n# Register the city scene and the metro data\nself.register_scene(nart, myscene, myscenegen, ident=\"METROSCENE\")\nself.register_element(\"METRO\", myscene.metrodat)\n\n# Create the entry/exit point.\nmyroom = self.register_element(\"_ENTRY_ROOM\", pbge.randmaps.rooms.Room(3, 3, anchor=pbge.randmaps.anchors.south), dident=\"METROSCENE\")\nmygate = self.register_element(\"MISSION_GATE\", Exit(name=\"{entrance_name}\", desc=\"{entrance_desc}\",anchor=pbge.randmaps.anchors.middle,plot_locked=True), dident=\"_ENTRY_ROOM\")\nself.elements[\"ENTRANCE\"] = mygate\n",
      "city_enter": "# Upon entering this scene, deal with any dead or incapacitated party members.\n# Also, deal with party members who have lost their mecha. This may include the PC.\ncamp.home_base = (self.elements[\"METROSCENE\"], self.elements[\"MISSION_GATE\"])\netlr = plotutility.EnterTownLanceRecovery(camp, self.elements[\"METROSCENE\"], self.elements[\"METRO\"])\nif {lancedev_on} and not etlr.did_recovery:\n    # We can maybe load a lancemate scene here. Yay!\n    if not any(p for p in camp.all_plots() if hasattr(p, \"LANCEDEV_PLOT\") and p.LANCEDEV_PLOT):\n        nart = GHNarrativeRequest(camp, pbge.plots.PlotState().based_on(self), adv_type=\"LANCEDEV\", plot_list=game.content.PLOT_LIST)\n        if nart.story:\n            nart.build()\n#: scene_enter"
    },
    "child_types": ["CITY_FEATURE", "SCENE_FEATURE"],
    "elements": {
      "METROSCENE": {"e_type": "scene", "name": "{city_name}", "aliases":  ["LOCALE","CITY"]},
      "MISSION_GATE": {"e_type": "gate", "name": "{entrance_name}"}
    }
  }

]