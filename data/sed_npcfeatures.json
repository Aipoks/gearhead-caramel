[
  {
    "label": "NPC_FEATURE",
    "scripts": {
      "plot_init": "self._offer{_uid} = scutils.DialogueOfferHandler({_uid}, single_use={single_use})\n\n",
      "npc_offers": "if self._offer{_uid}.can_add_offer():\n    mylist.append(Offer({dialogue_text}, context=ContextTag([\"{context}\"]), data={dialogue_data}, subject={subject}, subject_start={subject_start}, effect=self._offer{_uid}.get_effect(\n        #: dialogue_effect\n    ), no_repeats=True, dead_end={dead_end}))\n\n\n\n"
    },
    "name": "Add Dialogue Offer",
    "display_name": "{dialogue_text}",
    "desc": "Adds something for the NPC to say during a conversation.",
    "vars": {
      "context": {
        "default_val": "HELLO",
        "var_type": "dialogue_context"
      },
      "dialogue_text": {
        "default_val": "[HELLO]",
        "var_type": "text"
      },
      "dialogue_data": {
        "default_val": {},
        "var_type": "dialogue_data"
      },
      "single_use": {
        "default_val": false,
        "var_type": "boolean"
      },
      "subject": {
        "default_val": "",
        "var_type": "literal"
      },
      "subject_start": {
        "default_val": true,
        "var_type": "boolean"
      },
      "dead_end": {
        "default_val": false,
        "var_type": "boolean"
      }
    },
    "child_types": [
      "DIALOGUE_EFFECT"
    ],
    "sorting_rank": 4100,
    "category": "DIALOGUE"
  },
  {
    "label": "NPC_FEATURE",
    "scripts": {
      "plot_init": "self._offer{_uid} = scutils.DialogueOfferHandler({_uid}, single_use={single_use})\n\n",
      "npc_offers": "if {conditions}:\n    if self._offer{_uid}.can_add_offer():\n        mylist.append(Offer({dialogue_text}, context=ContextTag([\"{context}\"]), data={dialogue_data}, subject={subject}, subject_start={subject_start}, effect=self._offer{_uid}.get_effect(\n            #: dialogue_effect\n        ), no_repeats=True, dead_end={dead_end}))\n    #: dialogue_also\n#: dialogue_elif\n#: dialogue_else\n\n\n\n"
    },
    "name": "Add Dialogue If",
    "display_name": "If: {dialogue_text}",
    "desc": "Adds something for the NPC to say during a conversation, if a given condition is met.",
    "vars": {
      "conditions": {
        "default_val": [],
        "var_type": "conditional"
      },
      "context": {
        "default_val": "HELLO",
        "var_type": "dialogue_context"
      },
      "dialogue_text": {
        "default_val": "[HELLO]",
        "var_type": "text"
      },
      "dialogue_data": {
        "default_val": {},
        "var_type": "dialogue_data"
      },
      "single_use": {
        "default_val": false,
        "var_type": "boolean"
      },
      "subject": {
        "default_val": "",
        "var_type": "literal"
      },
      "subject_start": {
        "default_val": true,
        "var_type": "boolean"
      },
      "dead_end": {
        "default_val": false,
        "var_type": "boolean"
      }
    },
    "child_types": [
      "DIALOGUE_ALSO",
      "DIALOGUE_ELSE",
      "DIALOGUE_ELIF",
      "DIALOGUE_EFFECT"
    ],
    "sorting_rank": 4100,
    "category": "DIALOGUE"
  },
  {
    "label": "DIALOGUE_ALSO",
    "scripts": {
      "plot_init": "self._offer{_uid} = scutils.DialogueOfferHandler({_uid}, single_use={single_use})\n\n",
      "dialogue_also": "if self._offer{_uid}.can_add_offer():\n    mylist.append(Offer({dialogue_text}, context=ContextTag([\"{context}\"]), data={dialogue_data}, subject={subject}, subject_start={subject_start}, effect=self._offer{_uid}.get_effect(\n        #: dialogue_effect\n    ), no_repeats=True, dead_end={dead_end}))\n\n\n\n"
    },
    "name": "Add Dialogue Also",
    "display_name": "Also: {dialogue_text}",
    "desc": "Adds another dialogue line that requires the same conditions.",
    "vars": {
      "context": {
        "default_val": "HELLO",
        "var_type": "dialogue_context"
      },
      "dialogue_text": {
        "default_val": "[HELLO]",
        "var_type": "text"
      },
      "dialogue_data": {
        "default_val": {},
        "var_type": "dialogue_data"
      },
      "single_use": {
        "default_val": false,
        "var_type": "boolean"
      },
      "subject": {
        "default_val": "",
        "var_type": "literal"
      },
      "subject_start": {
        "default_val": true,
        "var_type": "boolean"
      },
      "dead_end": {
        "default_val": false,
        "var_type": "boolean"
      }
    },
    "child_types": [
      "DIALOGUE_EFFECT"
    ],
    "sorting_rank": 4100,
    "category": "DIALOGUE"
  },
  {
    "label": "DIALOGUE_ELIF",
    "scripts": {
      "plot_init": "self._offer{_uid} = scutils.DialogueOfferHandler({_uid}, single_use={single_use})\n\n",
      "npc_offers": "elif {conditions}:\n    if self._offer{_uid}.can_add_offer():\n        mylist.append(Offer({dialogue_text}, context=ContextTag([\"{context}\"]), data={dialogue_data}, subject={subject}, subject_start={subject_start}, effect=self._offer{_uid}.get_effect(\n            #: dialogue_effect\n        ), no_repeats=True, dead_end={dead_end}))\n    #: dialogue_also\n\n\n\n"
    },
    "name": "Add Dialogue Elif",
    "display_name": "Elif: {dialogue_text}",
    "desc": "Adds something for the NPC to say during a conversation, if the parent condition was false but the condition defined here is true.",
    "vars": {
      "conditions": {
        "default_val": [],
        "var_type": "conditional"
      },
      "context": {
        "default_val": "HELLO",
        "var_type": "dialogue_context"
      },
      "dialogue_text": {
        "default_val": "[HELLO]",
        "var_type": "text"
      },
      "dialogue_data": {
        "default_val": {},
        "var_type": "dialogue_data"
      },
      "single_use": {
        "default_val": false,
        "var_type": "boolean"
      },
      "subject": {
        "default_val": "",
        "var_type": "literal"
      },
      "subject_start": {
        "default_val": true,
        "var_type": "boolean"
      },
      "dead_end": {
        "default_val": false,
        "var_type": "boolean"
      }
    },
    "child_types": [
      "DIALOGUE_ALSO",
      "DIALOGUE_EFFECT"
    ],
    "sorting_rank": 4100,
    "category": "DIALOGUE"
  },
  {
    "label": "DIALOGUE_ELSE",
    "scripts": {
      "plot_init": "self._offer{_uid} = scutils.DialogueOfferHandler({_uid}, single_use={single_use})\n\n",
      "npc_offers": "else:\n    if self._offer{_uid}.can_add_offer():\n        mylist.append(Offer({dialogue_text}, context=ContextTag([\"{context}\"]), data={dialogue_data}, subject={subject}, subject_start={subject_start}, effect=self._offer{_uid}.get_effect(\n            #: dialogue_effect\n        ), no_repeats=True, dead_end={dead_end}))\n    #: dialogue_also\n\n\n\n"
    },
    "name": "Add Dialogue Else",
    "display_name": "Else: {dialogue_text}",
    "desc": "Adds something for the NPC to say during a conversation if all the previous conditions were False.",
    "vars": {
      "context": {
        "default_val": "HELLO",
        "var_type": "dialogue_context"
      },
      "dialogue_text": {
        "default_val": "[HELLO]",
        "var_type": "text"
      },
      "dialogue_data": {
        "default_val": {},
        "var_type": "dialogue_data"
      },
      "single_use": {
        "default_val": false,
        "var_type": "boolean"
      },
      "subject": {
        "default_val": "",
        "var_type": "literal"
      },
      "subject_start": {
        "default_val": true,
        "var_type": "boolean"
      },
      "dead_end": {
        "default_val": false,
        "var_type": "boolean"
      }
    },
    "child_types": [
      "DIALOGUE_EFFECT",
      "DIALOGUE_ALSO"
    ],
    "sorting_rank": 4100,
    "category": "DIALOGUE",
    "singular": true
  },
  {
    "label": "NPC_FEATURE",
    "scripts": {
      "plot_actions": "if {shop_name}:\n    self.shop_name_{_uid} = {shop_name}\nelse:\n    self.shop_name_{_uid} = str(self.elements[\"NPC\"]) + \"'s Shop\"\nself.shop_{_uid} = services.Shop(npc=self.elements[\"NPC\"], ware_types={shop_type}, rank=self.rank + random.randint(0, 15), shop_faction=self.elements[\"NPC\"].faction, buy_stolen_items={buy_stolen})\n\n",
      "npc_offers": "mylist.append(Offer(\"[OPENSHOP]\", context=ContextTag([context.OPEN_SHOP]), data=dict(shop_name=self.shop_name_{_uid}, wares={shop_wares}), effect=self.shop_{_uid}))\n\n\n\n"
    },
    "name": "Add Shop",
    "desc": "Adds a shop for this NPC",
    "vars": {
      "shop_name": {
        "default_val": "",
        "var_type": "literal"
      },
      "shop_type": {
        "default_val": "game.services.GENERAL_STORE",
        "var_type": "shop_type"
      },
      "shop_offer": {
        "default_val": "[OPENSHOP]",
        "var_type": "text",
        "must_be_defined": true
      },
      "shop_wares": {
        "default_val": "wares",
        "var_type": "literal",
        "must_be_defined": true
      },
      "buy_stolen": {
        "default_val": false,
        "var_type": "boolean"
      }
    },
    "child_types": [
      "DIALOGUE_EFFECT"
    ],
    "sorting_rank": 4100,
    "category": "DIALOGUE"
  },
  {
    "label": "NPC_FEATURE",
    "scripts": {
      "plot_subplots": "+subplot RLM_Relationship\n\n\n\n"
    },
    "name": "Make Possible Lancemate",
    "desc": "Adds the dialogue options for this NPC to potentially become a lancemate.",
    "sorting_rank": 4100,
    "category": "DIALOGUE"
  },
  {
    "label": "DIALOGUE_EFFECT",
    "scripts": {
      "dialogue_effect": "effect = self._{unique_id}{_uid}_effect,\n\n",
      "plot_methods": "def _{unique_id}{_uid}_effect(self, camp):\n    #: effect\n\n"
    },
    "name": "Add Dialogue Effect",
    "desc": "Adds an effect to a dialogue line. Note that dialogue effects are executed after the dialogue offer is made, not before.",
    "child_types": [
      "EFFECT"
    ],
    "needs_children": true
  }
]