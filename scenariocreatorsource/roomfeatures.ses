*NEW ROOM_FEATURE
    "name": "New Waypoint",
    "display_name": "{waypoint}: {waypoint_name}",
    "desc": "Adds a waypoint to this room.",
    "is_new_branch": true,
    "vars": {
      "waypoint": {"default_val": "ghwaypoints.Bookshelf", "var_type": "waypoint"},
      "waypoint_name": {"default_val": "", "var_type": "literal"},
      "waypoint_desc": {"default_val": "", "var_type": "text"},
      "anchor": {"default_val": null, "var_type": "map_anchor"}
    },
    "elements": {
      "WAYPOINT": {"e_type": "waypoint", "name": "{waypoint}: {waypoint_name}"}
    },
    "physicals": [
        {"element_key": "WAYPOINT", "parent": "ROOM"}
    ],
    "sorting_rank": 1000,
    "category": "WAYPOINTS"

*SCRIPT plot_subplots
+subplot WAYPOINT_{unique_id}_{_uid}

*SCRIPT main
class Waypoint_{unique_id}_{_uid}( Plot ):
    LABEL = "WAYPOINT_{unique_id}_{_uid}"
    active = True
    scope = "LOCALE"

    #: plot_properties

    def custom_init( self, nart ):
        +init_plot
        #: plot_init
        #: plot_actions
        #: plot_subplots
        return True

    #: plot_methods

*SCRIPT scenario_build
the_world[{WAYPOINT_UID}] = {waypoint}(name={waypoint_name}, desc={waypoint_desc}, anchor={anchor})
the_world[{ROOM_UID}].contents.append(the_world[{WAYPOINT_UID}])



*NEW ROOM_FEATURE
    "name": "New Treasure Container",
    "display_name": "Container: {waypoint}",
    "desc": "Adds a waypoint containing treasure to this room.",
    "is_new_branch": true,
    "vars": {
      "waypoint": {"default_val": "ghwaypoints.OldCrate", "var_type": "container_waypoint"},
      "waypoint_desc": {"default_val": "", "var_type": "text"},
      "anchor": {"default_val": null, "var_type": "map_anchor"},
      "treasure_amount": {"default_val": 100, "var_type": "integer"}
    },
    "elements": {
      "WAYPOINT": {"e_type": "waypoint", "name": "{waypoint}"}
    },
    "physicals": [
        {"element_key": "WAYPOINT", "parent": "ROOM"}
    ],
    "sorting_rank": 1000,
    "category": "WAYPOINTS"

*SCRIPT plot_subplots
+subplot WAYPOINT_{unique_id}_{_uid}

*SCRIPT main
class Waypoint_{unique_id}_{_uid}( Plot ):
    LABEL = "WAYPOINT_{unique_id}_{_uid}"
    active = True
    scope = "LOCALE"

    #: plot_properties

    def custom_init( self, nart ):
        +init_plot
        #: plot_init
        #: plot_actions
        #: plot_subplots
        return True

    #: plot_methods

*SCRIPT scenario_build
the_world[{WAYPOINT_UID}] = {waypoint}(desc={waypoint_desc}, anchor={anchor}, treasure_rank=self.rank+random.randint(-10,10), treasure_amount={treasure_amount})
the_world[{ROOM_UID}].contents.append(the_world[{WAYPOINT_UID}])



*NEW ROOM_FEATURE
    "name": "Cyberdoc Terminal",
    "display_name": "Cyberdoc Terminal",
    "desc": "Adds a cyberdoc terminal to this room.",
    "sorting_rank": 1000,
    "category": "WAYPOINTS"

*SCRIPT plot_init
self.elements["ROOM"].contents.append(ghwaypoints.CyberdocTerminal(shop=services.Shop(npc=None, rank=self.rank + random.randint(1, 25), ware_types=services.CYBERWARE_STORE)))



*NEW ROOM_FEATURE
    "name": "New Random NPC",
    "display_name": "NPC: {npc_name}",
    "desc": "Adds an NPC to this room. You can select their name, job, and faction.",
    "is_new_branch": true,
    "vars": {
      "npc_name": {"default_val": "", "var_type": "literal", "tooltip": "Leave blank for random name"},
      "npc_job": {"default_val": null, "var_type": "job", "tooltip": "Set None for random job"},
      "npc_combatant": {"default_val": false, "var_type": "boolean", "tooltip": "If False, NPC may still become combatant depending on job"},
      "npc_faction": {"default_val":  null, "var_type": "faction"}
    },
    "elements": {
      "NPC": {"e_type": "npc", "name": "NPC: {npc_name}"}
    },
    "child_types": ["NPC_FEATURE"],
    "physicals": [
        {"element_key": "NPC", "parent": "ROOM", "child_types": ["NPC_FEATURE"]}
    ],
    "sorting_rank": 1000,
    "category": "NPCS"

*SCRIPT plot_subplots
+subplot NPC_{unique_id}_{_uid}

*SCRIPT main
class NonPlayerCharacter_{unique_id}_{_uid}( Plot ):
    LABEL = "NPC_{unique_id}_{_uid}"
    active = True
    scope = "LOCALE"

    #: plot_properties

    def custom_init( self, nart ):
        +init_plot
        self.elements["NPC_SCENE"] = self.elements["LOCALE"]
        #: plot_init
        #: plot_actions
        #: plot_subplots
        return True

    #: plot_methods

    def NPC_offers(self, camp):
        mylist = list()
        #: npc_offers
        return mylist

*SCRIPT scenario_build
the_world[{NPC_UID}] = gears.selector.random_character(self.rank, local_tags=the_world[{METROSCENE_UID}].attributes, camp=nart.camp, name={npc_name}, job={npc_job}, faction={npc_faction}, combatant={npc_combatant})
the_world[{ROOM_UID}].contents.append(the_world[{NPC_UID}])



*NEW ROOM_FEATURE
    "name": "New Major NPC",
    "display_name": "Major NPC: {npcid}",
    "desc": "Adds a major NPC to this room. You can only add each major NPC once.",
    "is_new_branch": true,
    "vars": {
      "npcid": {"default_val": "Bear Bastard", "var_type": "major_npc_id"}
    },
    "elements": {
      "NPC": {"e_type": "npc", "name": "MNPC: {npcid}"}
    },
    "child_types": ["NPC_FEATURE"],
    "physicals": [
        {"element_key": "NPC", "parent": "ROOM", "child_types": ["NPC_FEATURE"]}
    ],
    "sorting_rank": 1000,
    "category": "NPCS"

*SCRIPT plot_subplots
+subplot MNPC_{unique_id}_{_uid}

*SCRIPT main
class MajorNonPlayerCharacter_{unique_id}_{_uid}( Plot ):
    LABEL = "MNPC_{unique_id}_{_uid}"
    active = True
    scope = "LOCALE"
    #: plot_properties
    def custom_init( self, nart ):
        +init_plot
        self.elements["NPC_SCENE"] = self.elements["LOCALE"]
        #: plot_init
        #: plot_actions
        #: plot_subplots
        return True

    #: plot_methods

    def NPC_offers(self, camp):
        mylist = list()
        #: npc_offers
        return mylist

*SCRIPT scenario_build
the_world[{NPC_UID}] = nart.camp.get_major_npc({npcid})
the_world[{ROOM_UID}].contents.append(the_world[{NPC_UID}])



*NEW ROOM_FEATURE
    "name": "Monster Encounter",
    "desc": "Adds some monsters to this room.",
    "vars": {
      "monster_type": {"default_val": ["ANIMAL"], "var_type": "list:monster_tags"}
    },
    "sorting_rank": 1000

*SCRIPT plot_subplots
self.add_sub_plot(nart, "MONSTER_ENCOUNTER", elements=dict(TYPE_TAGS={monster_type}))


*NEW ROOM_FEATURE
    "name": "One Shot Monster Encounter",
    "desc": "Adds some monsters to this room that will not be replaced if killed.",
    "vars": {
      "monster_type": {"default_val": ["ANIMAL"], "var_type": "list:monster_tags"}
    },
    "sorting_rank": 1000

*SCRIPT plot_subplots
self.add_sub_plot(nart, "ONE_SHOT_MONSTER_ENCOUNTER", elements=dict(TYPE_TAGS={monster_type}))
