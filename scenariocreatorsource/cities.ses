*NEW CITY
    "name": "New Metro Scene",
    "display_name": "City: {city_name}",
    "desc": "Adds a metro scene to the adventure. This is generally a city scene that serves as the player's home base between adventures. The metro scene handles the following things:\n - Provides a MetroDat slot for local plots.\n - Handles injury and death recovery.\n - Loads lancemate character dev plots (if enabled).",
    "is_new_branch": true,
    "vars": {
      "city_name": {"default_val": "Megacormack", "var_type": "string"},
      "city_faction": {"default_val": null, "var_type": "faction"},
      "city_attributes": {"default_val": ["gears.tags.SCENE_OUTDOORS", "gears.tags.City", "personality.GreenZone", "gears.tags.SCENE_PUBLIC"], "var_type": "scene_tags"},
      "scene_generator": {"default_val": "pbge.randmaps.CityGridGenerator", "var_type": "city_scene_generator"},
      "entrance_name": {"default_val": "Exit", "var_type": "string"},
      "entrance_desc": {"default_val": "Where do you want to go?", "var_type": "text"},
      "entrance_world_map": {"default_val": null, "var_type": "world_map"},
      "entrance_world_map_data": {"default_val": null, "var_type": "world_map_data"},
      "entrance_anchor": {"default_val": "pbge.randmaps.anchors.south", "var_type": "map_anchor"},
      "exploration_music": {"default_val":  "airtone_-_reCreation.ogg", "var_type": "music"},
      "combat_music": {"default_val":  "Late.ogg", "var_type": "music"},
      "city_palette": {"default_val":  ["Black","Black","Black","Black","Black"], "var_type": "palette"},
      "floor_terrain": {"default_val": "ghterrain.GreenZoneGrass", "var_type": "terrain:floor"},
      "road_terrain": {"default_val": "ghterrain.Pavement", "var_type": "terrain:floor"},
      "allow_random_plots": {"default_val": true, "var_type": "boolean"}
    },
    "child_types": ["CITY_FEATURE", "SCENE_FEATURE"],
    "elements": {
      "LOCALE": {"e_type": "scene", "name": "{city_name}", "aliases":  ["METROSCENE","CITY"]},
      "MISSION_GATE": {"e_type": "gate", "name": "{entrance_name}", "aliases": ["ENTRANCE"]}
    },
    "physicals": [
        {"element_key": "LOCALE", "variable_keys": ["city_name", "city_faction", "city_attributes", "scene_generator", "exploration_music", "combat_music", "city_palette", "floor_terrain", "road_terrain", "allow_random_plots"], "child_types": null},
        {"element_key": "MISSION_GATE", "parent": "LOCALE", "variable_keys": ["entrance_name", "entrance_desc", "entrance_world_map", "entrance_world_map_data", "entrance_anchor"]}
    ],
    "sorting_rank": 1000,
    "category": "LOCATIONS"

*SCRIPT plot_subplots
+subplot CITY_{unique_id}_{_uid}

*SCRIPT main
class City_{unique_id}_{_uid}( Plot ):
    LABEL = "CITY_{unique_id}_{_uid}"
    active = True
    scope = "METRO"

    def custom_init( self, nart ):
        +init_plot
        self.elements["METRO"] = self.elements["LOCALE"].metrodat
        if {entrance_world_map}:
            edge_params = {entrance_world_map_data.edge_params}
            for e in edge_params:
                nart.camp.campdata[{entrance_world_map}].connect_entrance_to_entrance(self.elements["MISSION_GATE"], **e)

        #: plot_init
        #: plot_actions
        #: plot_subplots
        +subplot CF_METROSCENE_RECOVERY_HANDLER
        +subplot CF_METROSCENE_WME_DEFENSE_HANDLER

        if {allow_random_plots}:
            +subplot CF_METROSCENE_RANDOM_PLOT_HANDLER

        return True

    #: plot_methods

*SCRIPT scenario_build
# Build the city here, store it in the_world
team1 = teams.Team(name="Player Team")
team2 = teams.Team(name="Civilian Team", allies=(team1,))
myscene = gears.GearHeadScene(
    50, 50, "{city_name}", player_team=team1, civilian_team=team2, scale=gears.scale.HumanScale, is_metro=True,
    faction={city_faction}, attributes={city_attributes},
    exploration_music={exploration_music}, combat_music={combat_music}
)

# Create a scene generator
myscenegen = {scene_generator}(
    myscene, game.content.gharchitecture.HumanScaleGreenzone(floor_terrain={floor_terrain}), road_terrain={road_terrain}
)

# Register the city scene and the metro data
self.register_scene(nart, myscene, myscenegen, ident="_CITY_{_uid}")
the_world[{LOCALE_UID}] = myscene

# Create the entry/exit point.
myroom = self.register_element(
    "_ENTRY_ROOM_{_uid}", pbge.randmaps.rooms.Room(3, 3, anchor={entrance_anchor}),
    dident="_CITY_{_uid}"
)

mygate = self.register_element(
    "_MISSION_GATE_{_uid}", Exit(name="{entrance_name}", desc={entrance_desc},
    anchor=pbge.randmaps.anchors.middle, plot_locked=True), dident="_ENTRY_ROOM_{_uid}"
)

the_world[{MISSION_GATE_UID}] = mygate

if {entrance_world_map}:
    nart.camp.campdata[{entrance_world_map}].associate_gate_with_map(mygate)
    mynode = campfeatures.WorldMapNode(destination=myscene, entrance=mygate, {entrance_world_map_data.node_params})
    nart.camp.campdata[{entrance_world_map}].add_node(mynode, {entrance_world_map_data.node_pos})



*NEW CITY
    "name": "New Beachfront Metro Scene",
    "display_name": "City: {city_name}",
    "desc": "Adds a metro scene to the adventure. This is generally a city scene that serves as the player's home base between adventures. The metro scene handles the following things:\n - Provides a MetroDat slot for local plots.\n - Handles injury and death recovery.\n - Loads lancemate character dev plots (if enabled).",
    "is_new_branch": true,
    "vars": {
      "city_name": {"default_val": "Megabusan", "var_type": "string"},
      "city_faction": {"default_val": null, "var_type": "faction"},
      "city_attributes": {"default_val": ["gears.tags.SCENE_OUTDOORS", "gears.tags.City", "personality.GreenZone", "gears.tags.SCENE_PUBLIC"], "var_type": "scene_tags"},
      "room_name": {"default_val": "The Beach", "var_type": "string"},
      "entrance_name": {"default_val": "To The Docks", "var_type": "string"},
      "entrance_desc": {"default_val": "Where do you want to go?", "var_type": "text"},
      "entrance_world_map": {"default_val": null, "var_type": "world_map"},
      "entrance_world_map_data": {"default_val": null, "var_type": "world_map_data"},
      "exploration_music": {"default_val":  "airtone_-_reCreation.ogg", "var_type": "music"},
      "combat_music": {"default_val":  "Late.ogg", "var_type": "music"},
      "city_palette": {"default_val":  ["Black","Black","Black","Black","Black"], "var_type": "palette"},
      "city_terrain": {"default_val": "ghterrain.GreenZoneGrass", "var_type": "terrain:floor"},
      "beach_terrain": {"default_val": "ghterrain.Sand", "var_type": "terrain:floor"},
      "water_terrain": {"default_val": "ghterrain.Water", "var_type": "terrain:floor"},
      "road_terrain": {"default_val": "ghterrain.Pavement", "var_type": "terrain:floor"},
      "allow_random_plots": {"default_val": true, "var_type": "boolean"}
    },
    "child_types": ["CITY_FEATURE", "SCENE_FEATURE"],
    "elements": {
      "LOCALE": {"e_type": "scene", "name": "{city_name}", "aliases":  ["METROSCENE","CITY"]},
      "ROOM": {"e_type": "room", "name": "Room: {room_name}"},
      "MISSION_GATE": {"e_type": "gate", "name": "{entrance_name}", "aliases": ["ENTRANCE"]}
    },
    "physicals": [
        {"element_key": "LOCALE", "variable_keys": ["city_name", "city_faction", "city_attributes", "exploration_music", "combat_music", "city_palette", "city_terrain", "beach_terrain", "water_terrain", "road_terrain"], "child_types": null},
        {"element_key": "ROOM", "parent": "LOCALE", "variable_keys": ["room_name"]},
        {"element_key": "MISSION_GATE", "parent": "ROOM", "variable_keys": ["entrance_name", "entrance_desc", "entrance_world_map", "entrance_world_map_data"]}
    ],
    "sorting_rank": 1000,
    "category": "LOCATIONS"

*SCRIPT plot_subplots
+subplot CITY_{unique_id}_{_uid}

*SCRIPT main
class City_{unique_id}_{_uid}( Plot ):
    LABEL = "CITY_{unique_id}_{_uid}"
    active = True
    scope = "METRO"

    def custom_init( self, nart ):
        +init_plot
        self.elements["METRO"] = self.elements["LOCALE"].metrodat
        if {entrance_world_map}:
            edge_params = {entrance_world_map_data.edge_params}
            for e in edge_params:
                nart.camp.campdata[{entrance_world_map}].connect_entrance_to_entrance(self.elements["MISSION_GATE"], **e)
        #: plot_init
        #: plot_actions
        #: plot_subplots
        +subplot CF_METROSCENE_RECOVERY_HANDLER
        +subplot CF_METROSCENE_WME_DEFENSE_HANDLER

        if {allow_random_plots}:
            +subplot CF_METROSCENE_RANDOM_PLOT_HANDLER

        return True

    #: plot_methods

*SCRIPT scenario_build
# Build the city here, store it in the_world
team1 = teams.Team(name="Player Team")
team2 = teams.Team(name="Civilian Team", allies=(team1,))
myscene = gears.GearHeadScene(
    50, 60, "{city_name}", player_team=team1, civilian_team=team2, scale=gears.scale.HumanScale, is_metro=True,
    faction={city_faction}, attributes={city_attributes},
    exploration_music={exploration_music}, combat_music={combat_music}
)

# Create a scene generator
myroom = pbge.randmaps.rooms.Room(40,25)
myroom.area = pygame.Rect(5,10,40,25)
myscenegen = pbge.randmaps.PartlyUrbanGenerator(
    myscene, game.content.gharchitecture.HumanScaleGreenzone(prepare=pbge.randmaps.prep.GradientPrep([[{city_terrain},40],[{beach_terrain},15],[{water_terrain},5]]),
                                                             mutate=pbge.randmaps.mutator.CellMutator(),
                                                             wall_converter=pbge.randmaps.converter.WallOnlyOnFloorConverter(ghterrain.Bushes, {city_terrain})),
    road_terrain={road_terrain},
    urban_area=myroom
)

# Register the city scene and the metro data
self.register_scene(nart, myscene, myscenegen, ident="_CITY_{_uid}")

the_world[{LOCALE_UID}] = myscene

# Create the entry/exit point.
myroom = self.register_element(
    "_ENTRY_ROOM_{_uid}", pbge.randmaps.rooms.Room(50, 10),
    dident="_CITY_{_uid}"
)
myroom.area = pygame.Rect(0,40,50,10)

+add_physical ROOM myroom

mygate = self.register_element(
    "_MISSION_GATE_{_uid}", Exit(name="{entrance_name}", desc={entrance_desc},
    anchor=pbge.randmaps.anchors.middle, plot_locked=True), dident="_ENTRY_ROOM_{_uid}"
)

the_world[{MISSION_GATE_UID}] = mygate

if {entrance_world_map}:
    nart.camp.campdata[{entrance_world_map}].associate_gate_with_map(mygate)
    mynode = campfeatures.WorldMapNode(destination=myscene, entrance=mygate, {entrance_world_map_data.node_params})
    nart.camp.campdata[{entrance_world_map}].add_node(mynode, {entrance_world_map_data.node_pos})




*NEW CITY_FEATURE
    "name": "Add Random Lancemates",
    "desc": "Add some random lancemates to this city.",
    "label": "CITY_FEATURE",
    "vars": {
      "num_random_lancemates": {"default_val": "1", "var_type": "integer"}
    },
    "singular": true

*SCRIPT plot_subplots
for t in range({num_random_lancemates}):
    +subplot RANDOM_LANCEMATE



*NEW CITY_FEATURE
    "name": "Add Black Market",
    "display_name": "Black Market: {shop_name}",
    "desc": "Adds a black market and a shopkeeper NPC to the city.",
    "is_new_branch": true,
    "vars": {
      "shop_name": {"default_val": "", "var_type": "literal", "tooltip": "Leave blank for random name"},
      "npc_name": {"default_val": "", "var_type": "literal", "tooltip": "Leave blank for random name"},
      "room_name": {"default_val": "Foyer", "var_type": "literal"},
      "shop_faction": {"default_val":  null, "var_type": "faction"},
      "door_sign": {"default_val": null, "var_type": "door_sign"}
   },
   "child_types": ["SCENE_FEATURE"],
   "elements": {
      "LOCALE": {"e_type": "scene", "name": "Black Market: {shop_name}"},
      "ROOM": {"e_type": "room", "name": "Room: {room_name}"},
      "NPC": {"e_type": "npc", "name": "Shopkeeper: {npc_name}", "aliases": ["NPC"]}
    },
    "physicals": [
        {"element_key": "LOCALE", "parent": "METROSCENE", "variable_keys": ["shop_name", "shop_faction","door_sign"], "child_types": ["SCENE_FEATURE"]},
        {"element_key": "ROOM", "parent": "LOCALE", "variable_keys": ["room_name"]},
        {"element_key": "NPC", "parent": "ROOM", "variable_keys": ["npc_name"]}
    ]

*SCRIPT scenario_build
splot = self.add_sub_plot(
    nart, "SHOP_BLACKMARKET", elements=dict(LOCALE=the_world[{METROSCENE_UID}], METROSCENE=the_world[{METROSCENE_UID}], METRO=the_world[{METROSCENE_UID}].metrodat, MISSION_GATE=the_world[{MISSION_GATE_UID}], CITY_COLORS={city_palette}, SHOP_NAME={shop_name}, NPC_NAME={npc_name}, DOOR_SIGN={door_sign})
)
+add_physical LOCALE splot.elements["INTERIOR"]
+add_physical ROOM splot.elements["FOYER"]
+add_physical NPC splot.elements["SHOPKEEPER"]

*SCRIPT plot_init
+subplot BLACKMARKET_{unique_id}_{_uid}

*SCRIPT main
class BlackMarket_{unique_id}_{_uid}( Plot ):
    LABEL = "BLACKMARKET_{unique_id}_{_uid}"
    active = True
    scope = "LOCALE"

    def custom_init( self, nart ):
        +init_plot
        #: plot_init
        #: plot_actions
        #: plot_subplots
        return True

    def NPC_offers(self, camp):
        mylist = list()
        #: npc_offers
        return mylist

    #: plot_methods



*NEW CITY_FEATURE
    "name": "Add General Store",
    "display_name": "General Store: {shop_name}",
    "desc": "Adds a general store and a shopkeeper NPC to the city. Leave shop_name and/or npc_name blank for random names.",
    "is_new_branch": true,
    "vars": {
      "shop_name": {"default_val": "", "var_type": "literal", "tooltip": "Leave blank for random name"},
      "npc_name": {"default_val": "", "var_type": "literal", "tooltip": "Leave blank for random name"},
      "room_name": {"default_val": "Foyer", "var_type": "literal"},
      "shop_faction": {"default_val":  null, "var_type": "faction"},
      "door_sign": {"default_val": null, "var_type": "door_sign"}
   },
  "child_types": ["SCENE_FEATURE"],
   "elements": {
      "LOCALE": {"e_type": "scene", "name": "General Store: {shop_name}"},
      "ROOM": {"e_type": "room", "name": "Room: {room_name}"},
      "NPC": {"e_type": "npc", "name": "Shopkeeper: {npc_name}", "aliases": ["NPC"]}
    },
    "physicals": [
        {"element_key": "LOCALE", "parent": "METROSCENE", "variable_keys": ["shop_name", "shop_faction","door_sign"], "child_types": ["SCENE_FEATURE"]},
        {"element_key": "ROOM", "parent": "LOCALE", "variable_keys": ["room_name"]},
        {"element_key": "NPC", "parent": "ROOM", "variable_keys": ["npc_name"]}
    ]

*SCRIPT scenario_build
splot = self.add_sub_plot(nart, "SHOP_GENERALSTORE", elements=dict(LOCALE=the_world[{METROSCENE_UID}], METROSCENE=the_world[{METROSCENE_UID}], METRO=the_world[{METROSCENE_UID}].metrodat, MISSION_GATE=the_world[{MISSION_GATE_UID}], CITY_COLORS={city_palette}, SHOP_NAME={shop_name}, NPC_NAME={npc_name}, DOOR_SIGN={door_sign}))
+add_physical LOCALE splot.elements["INTERIOR"]
+add_physical ROOM splot.elements["FOYER"]
+add_physical NPC splot.elements["SHOPKEEPER"]

*SCRIPT plot_init
+subplot GENERALSTORE_{unique_id}_{_uid}

*SCRIPT main
class GeneralStore_{unique_id}_{_uid}( Plot ):
    LABEL = "GENERALSTORE_{unique_id}_{_uid}"
    active = True
    scope = "LOCALE"

    def custom_init( self, nart ):
        +init_plot
        #: plot_init
        #: plot_actions
        #: plot_subplots
        return True

    def NPC_offers(self, camp):
        mylist = list()
        #: npc_offers
        return mylist

    #: plot_methods



*NEW CITY_FEATURE
    "name": "Add Garage",
    "display_name": "Garage: {shop_name}",
    "desc": "Adds a garage and a mechanic NPC to the city. Leave shop_name and/or npc_name blank for random names.",
    "is_new_branch": true,
    "vars": {
      "shop_name": {"default_val": "", "var_type": "literal", "tooltip": "Leave blank for random name"},
      "npc_name": {"default_val": "", "var_type": "literal", "tooltip": "Leave blank for random name"},
      "room_name": {"default_val": "Foyer", "var_type": "literal"},
      "shop_faction": {"default_val":  null, "var_type": "faction"},
      "door_sign": {"default_val": null, "var_type": "door_sign"}
   },
   "child_types": ["SCENE_FEATURE"],
   "elements": {
      "LOCALE": {"e_type": "scene", "name": "Garage: {shop_name}"},
      "ROOM": {"e_type": "room", "name": "Room: {room_name}"},
      "NPC": {"e_type": "npc", "name": "Mechanic: {npc_name}", "aliases": ["NPC"]}
    },
    "physicals": [
        {"element_key": "LOCALE", "parent": "METROSCENE", "variable_keys": ["shop_name", "shop_faction","door_sign"], "child_types": ["SCENE_FEATURE"]},
        {"element_key": "ROOM", "parent": "LOCALE", "variable_keys": ["room_name"]},
        {"element_key": "NPC", "parent": "ROOM", "variable_keys": ["npc_name"]}
    ]

*SCRIPT scenario_build
splot = self.add_sub_plot(nart, "SHOP_GARAGE", elements=dict(LOCALE=the_world[{METROSCENE_UID}], METROSCENE=the_world[{METROSCENE_UID}], METRO=the_world[{METROSCENE_UID}].metrodat, MISSION_GATE=the_world[{MISSION_GATE_UID}], CITY_COLORS={city_palette}, SHOP_NAME={shop_name}, NPC_NAME={npc_name}, DOOR_SIGN={door_sign}))
+add_physical LOCALE splot.elements["INTERIOR"]
+add_physical NPC splot.elements["SHOPKEEPER"]
+add_physical ROOM splot.elements["FOYER"]

*SCRIPT plot_init
+subplot GARAGE_{unique_id}_{_uid}

*SCRIPT main
class Garage_{unique_id}_{_uid}( Plot ):
    LABEL = "GARAGE_{unique_id}_{_uid}"
    active = True
    scope = "LOCALE"

    def custom_init( self, nart ):
        +init_plot
        #: plot_init
        #: plot_actions
        #: plot_subplots
        return True

    def NPC_offers(self, camp):
        mylist = list()
        #: npc_offers
        return mylist

    #: plot_methods



*NEW CITY_FEATURE
    "name": "Add Hospital",
    "display_name": "Hospital: {shop_name}",
    "desc": "Adds a garage and a mechanic NPC to the city. Leave shop_name and/or npc_name blank for random names.",
    "is_new_branch": true,
    "vars": {
      "shop_name": {"default_val": "", "var_type": "literal", "tooltip": "Leave blank for random name"},
      "npc_name": {"default_val": "", "var_type": "literal", "tooltip": "Leave blank for random name"},
      "room_name": {"default_val": "Foyer", "var_type": "literal"},
      "shop_faction": {"default_val":  null, "var_type": "faction"},
      "door_sign": {"default_val": null, "var_type": "door_sign"}
   },
   "child_types": ["SCENE_FEATURE"],
   "elements": {
      "LOCALE": {"e_type": "scene", "name": "Hospital: {shop_name}"},
      "ROOM": {"e_type": "room", "name": "Room: {room_name}"},
      "NPC": {"e_type": "npc", "name": "Doctor: {npc_name}", "aliases": ["NPC"]}
    },
    "physicals": [
        {"element_key": "LOCALE", "parent": "METROSCENE", "variable_keys": ["shop_name", "shop_faction","door_sign"], "child_types": ["SCENE_FEATURE"]},
        {"element_key": "ROOM", "parent": "LOCALE", "variable_keys": ["room_name"]},
        {"element_key": "NPC", "parent": "ROOM", "variable_keys": ["npc_name"]}
    ]

*SCRIPT scenario_build
splot = self.add_sub_plot(nart, "SHOP_HOSPITAL", elements=dict(LOCALE=the_world[{METROSCENE_UID}], METROSCENE=the_world[{METROSCENE_UID}], METRO=the_world[{METROSCENE_UID}].metrodat, MISSION_GATE=the_world[{MISSION_GATE_UID}], CITY_COLORS={city_palette}, SHOP_NAME={shop_name}, NPC_NAME={npc_name}, DOOR_SIGN={door_sign}))
+add_physical LOCALE splot.elements["INTERIOR"]
+add_physical NPC splot.elements["SHOPKEEPER"]
+add_physical ROOM splot.elements["FOYER"]

*SCRIPT plot_init
+subplot HOSPITAL_{unique_id}_{_uid}

*SCRIPT main
class Hospital_{unique_id}_{_uid}( Plot ):
    LABEL = "HOSPITAL_{unique_id}_{_uid}"
    active = True
    scope = "LOCALE"

    def custom_init( self, nart ):
        +init_plot
        #: plot_init
        #: plot_actions
        #: plot_subplots
        return True

    def NPC_offers(self, camp):
        mylist = list()
        #: npc_offers
        return mylist

    #: plot_methods



*NEW CITY_FEATURE
    "name": "Add Tavern",
    "display_name": "Tavern: {tavern_name}",
    "desc": "Adds a tavern and associated content to the city. Leave shop_name and/or npc_name blank for random names.",
    "is_new_branch": true,
    "vars": {
      "tavern_name": {"default_val": "", "var_type": "literal", "tooltip": "Leave blank for random name"},
      "npc_name": {"default_val": "", "var_type": "literal", "tooltip": "Leave blank for random name"},
      "room_name": {"default_val": "Foyer", "var_type": "literal"},
      "door_sign": {"default_val": null, "var_type": "door_sign"}
   },
   "child_types": ["SCENE_FEATURE"],
   "elements": {
      "LOCALE": {"e_type": "scene", "name": "Tavern: {tavern_name}"},
      "ROOM": {"e_type": "room", "name": "Room: {room_name}"},
      "NPC": {"e_type": "npc", "name": "Bartender: {npc_name}"}
    },
    "physicals": [
        {"element_key": "LOCALE", "parent": "METROSCENE", "variable_keys": ["tavern_name","door_sign"], "child_types": ["SCENE_FEATURE"]},
        {"element_key": "ROOM", "parent": "LOCALE", "variable_keys": ["room_name"]},
        {"element_key": "NPC", "parent": "ROOM", "variable_keys": ["npc_name"]}
    ]

*SCRIPT scenario_build
splot = self.add_sub_plot(nart, "SHOP_TAVERN", elements=dict(LOCALE=the_world[{METROSCENE_UID}], METROSCENE=the_world[{METROSCENE_UID}], METRO=the_world[{METROSCENE_UID}].metrodat, MISSION_GATE=the_world[{MISSION_GATE_UID}], CITY_COLORS={city_palette}, SHOP_NAME={tavern_name}, NPC_NAME={npc_name}, DOOR_SIGN={door_sign}))
+add_physical LOCALE splot.elements["INTERIOR"]
+add_physical NPC splot.elements["SHOPKEEPER"]
+add_physical ROOM splot.elements["FOYER"]

*SCRIPT plot_init
+subplot TAVERN_{unique_id}_{_uid}

*SCRIPT main
class Tavern_{unique_id}_{_uid}( Plot ):
    LABEL = "TAVERN_{unique_id}_{_uid}"
    active = True
    scope = "LOCALE"

    def custom_init( self, nart ):
        +init_plot
        #: plot_init
        #: plot_actions
        #: plot_subplots
        return True

    def NPC_offers(self, camp):
        mylist = list()
        #: npc_offers
        return mylist

    #: plot_methods



*NEW CITY_FEATURE
    "name": "Add Town Hall",
    "display_name": "Town Hall: {hall_name}",
    "desc": "Adds a town hall with a leader NPC to the city. Leave shop_name and/or npc_name blank for random names.",
    "is_new_branch": true,
    "vars": {
      "hall_name": {"default_val": "", "var_type": "literal", "tooltip": "Leave blank for random name"},
      "npc_name": {"default_val": "", "var_type": "literal", "tooltip": "Leave blank for random name"},
      "room_name": {"default_val": "Foyer", "var_type": "literal"},
      "hall_faction": {"default_val":  null, "var_type": "faction"},
      "door_sign": {"default_val": null, "var_type": "door_sign"}
   },
  "child_types": ["SCENE_FEATURE"],
   "elements": {
      "LOCALE": {"e_type": "scene", "name": "Town Hall: {hall_name}"},
      "ROOM": {"e_type": "room", "name": "Room: {room_name}"},
      "NPC": {"e_type": "npc", "name": "Leader: {npc_name}"}
    },
    "physicals": [
        {"element_key": "LOCALE", "parent": "METROSCENE", "variable_keys": ["hall_name", "hall_faction","door_sign"], "child_types": ["SCENE_FEATURE"]},
        {"element_key": "ROOM", "parent": "LOCALE", "variable_keys": ["room_name"]},
        {"element_key": "NPC", "parent": "ROOM", "variable_keys": ["npc_name"]}
    ],
    "singular": true

*SCRIPT scenario_build
splot = self.add_sub_plot(nart, "TOWNHALL", elements=dict(LOCALE=the_world[{METROSCENE_UID}], METROSCENE=the_world[{METROSCENE_UID}], METRO=the_world[{METROSCENE_UID}].metrodat, MISSION_GATE=the_world[{MISSION_GATE_UID}], CITY_COLORS={city_palette}, LEADER_NAME={npc_name}, HALL_NAME={hall_name}, DOOR_SIGN={door_sign}, HALL_FACTION={hall_faction}))
+add_physical LOCALE splot.elements["INTERIOR"]
+add_physical ROOM splot.elements["FOYER"]
+add_physical NPC splot.elements["LEADER"]

*SCRIPT plot_init
+subplot TOWNHALL_{unique_id}_{_uid}

*SCRIPT main
class TownHall_{unique_id}_{_uid}( Plot ):
    LABEL = "TOWNHALL_{unique_id}_{_uid}"
    active = True
    scope = "LOCALE"

    def custom_init( self, nart ):
        +init_plot
        #: plot_init
        #: plot_actions
        #: plot_subplots
        return True

    def NPC_offers(self, camp):
        mylist = list()
        #: npc_offers
        return mylist

    #: plot_methods
